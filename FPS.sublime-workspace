{
	"auto_complete":
	{
		"selected_items":
		[
			[
				"canMove",
				"canMoveY"
			],
			[
				"fut",
				"futureY"
			],
			[
				"cam",
				"canMoveY"
			],
			[
				"x",
				"x"
			],
			[
				"next",
				"nextStep"
			],
			[
				"nex",
				"nextStep"
			],
			[
				"canM",
				"canMoveY"
			],
			[
				"IS",
				"IsPlayerColliding(x, y)"
			],
			[
				"Is",
				"IsPlayerColliding(x, y)"
			],
			[
				"sele",
				"selectedTexture"
			],
			[
				"textu",
				"textureIndex"
			],
			[
				"local",
				"local\tlocal x = 1"
			],
			[
				"off",
				"offsetY"
			],
			[
				"close",
				"close()"
			],
			[
				"love",
				"loveFile"
			],
			[
				"My",
				"MyGame"
			],
			[
				"con",
				"concatSuccess"
			],
			[
				"if",
				"if .. then"
			],
			[
				"zip",
				"zipSuccess"
			],
			[
				"key",
				"keypressed(key)"
			],
			[
				"offset",
				"offsetY"
			],
			[
				"offse",
				"offsetY"
			],
			[
				"mouse",
				"love.mousepressed"
			],
			[
				"le",
				"LevelEditor"
			],
			[
				"files",
				"love.filesystem.getInfo"
			],
			[
				"file",
				"love.filesystem.newFile"
			],
			[
				"enemy",
				"enemyAI"
			],
			[
				"enem",
				"enemyAI"
			],
			[
				"func",
				"function\tfunction"
			],
			[
				"check",
				"checkY"
			],
			[
				"futru",
				"futureY"
			],
			[
				"can",
				"canMoveY"
			],
			[
				"f",
				"floor"
			],
			[
				"ran",
				"math.random"
			],
			[
				"o",
				"math.cos"
			],
			[
				"mathco",
				"math.cos"
			],
			[
				"en",
				"enemy"
			],
			[
				"co",
				"math.cos"
			],
			[
				"lef",
				"leftX"
			],
			[
				"hi",
				"hitWall"
			],
			[
				"futr",
				"futureY"
			],
			[
				"futu",
				"futureY"
			],
			[
				"an",
				"angleDifference"
			],
			[
				"ma",
				"math"
			],
			[
				"Cs",
				"CastRay(angle)"
			],
			[
				"ray",
				"rayAngle"
			],
			[
				"del",
				"deltaDistY"
			],
			[
				"side",
				"sideDistY"
			],
			[
				"col",
				"columnWidth"
			],
			[
				"get",
				"getDimensions()"
			]
		]
	},
	"buffers":
	[
		{
			"file": "main.lua",
			"settings":
			{
				"buffer_size": 11795,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			},
			"undo_stack":
			[
				[
					183,
					4,
					"swap_line_up",
					null,
					"CAAAAMMbAAAAAAAAwxsAAAAAAAAVAAAAICAgIFByZUNvbXB1dGVSYXlzKCkKfBsAAAAAAACRGwAAAAAAAAAAAAB8GwAAAAAAAHwbAAAAAAAAFQAAACAgICBQcmVDb21wdXRlUmF5cygpCiMbAAAAAAAAOBsAAAAAAAAAAAAAIxsAAAAAAAAjGwAAAAAAABUAAAAgICAgUHJlQ29tcHV0ZVJheXMoKQoiGwAAAAAAADcbAAAAAAAAAAAAACIbAAAAAAAAIhsAAAAAAAAVAAAAICAgIFByZUNvbXB1dGVSYXlzKCkKDBsAAAAAAAAhGwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA1xsAAAAAAADXGwAAAAAAAAAAAAAAAPC/"
				],
				[
					199,
					1,
					"insert",
					{
						"characters": "\n\nfunction"
					},
					"CgAAAIITAAAAAAAAgxMAAAAAAAAAAAAAgxMAAAAAAACEEwAAAAAAAAAAAACEEwAAAAAAAIUTAAAAAAAAAAAAAIUTAAAAAAAAhhMAAAAAAAAAAAAAhhMAAAAAAACHEwAAAAAAAAAAAACHEwAAAAAAAIgTAAAAAAAAAAAAAIgTAAAAAAAAiRMAAAAAAAAAAAAAiRMAAAAAAACKEwAAAAAAAAAAAACKEwAAAAAAAIsTAAAAAAAAAAAAAIsTAAAAAAAAjBMAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAghMAAAAAAACCEwAAAAAAAAAAAAAAAPC/"
				],
				[
					200,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAIwTAAAAAAAAjRMAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAjBMAAAAAAACMEwAAAAAAAAAAAAAAAPC/"
				],
				[
					201,
					1,
					"insert_completion",
					{
						"completion": "lsp_select_completion {\"index\":0,\"session_name\":\"LSP-lua\"}",
						"format": "command",
						"keep_prefix": false,
						"must_insert": true,
						"trigger": "do .. end"
					},
					"AQAAAI0TAAAAAAAAmBMAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAjRMAAAAAAACNEwAAAAAAAAAAAAAAAPC/"
				],
				[
					202,
					4,
					"left_delete",
					null,
					"BAAAAJATAAAAAAAAkBMAAAAAAAAEAAAAICAgII8TAAAAAAAAjxMAAAAAAAABAAAACo4TAAAAAAAAjhMAAAAAAAABAAAAb40TAAAAAAAAjRMAAAAAAAABAAAAZA",
					"AQAAAAAAAAABAAAAlBMAAAAAAACUEwAAAAAAAAAAAAAAAPC/"
				],
				[
					203,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAAI0TAAAAAAAAjhMAAAAAAAAAAAAAjhMAAAAAAACSEwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAjRMAAAAAAACNEwAAAAAAAAAAAAAAAPC/"
				],
				[
					206,
					1,
					"insert",
					{
						"characters": "IsVal"
					},
					"BgAAAI0TAAAAAAAAjhMAAAAAAAAAAAAAjxMAAAAAAACPEwAAAAAAAAQAAAAgICAgjhMAAAAAAACPEwAAAAAAAAAAAACPEwAAAAAAAJATAAAAAAAAAAAAAJATAAAAAAAAkRMAAAAAAAAAAAAAkRMAAAAAAACSEwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAjRMAAAAAAACNEwAAAAAAAP///////+9/"
				],
				[
					207,
					1,
					"insert",
					{
						"characters": "idSpwan"
					},
					"BwAAAJITAAAAAAAAkxMAAAAAAAAAAAAAkxMAAAAAAACUEwAAAAAAAAAAAACUEwAAAAAAAJUTAAAAAAAAAAAAAJUTAAAAAAAAlhMAAAAAAAAAAAAAlhMAAAAAAACXEwAAAAAAAAAAAACXEwAAAAAAAJgTAAAAAAAAAAAAAJgTAAAAAAAAmRMAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAkhMAAAAAAACSEwAAAAAAAAAAAAAAAPC/"
				],
				[
					208,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAAJkTAAAAAAAAmxMAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAmRMAAAAAAACZEwAAAAAAAAAAAAAAAPC/"
				],
				[
					209,
					1,
					"insert",
					{
						"characters": "x,"
					},
					"AgAAAJoTAAAAAAAAmxMAAAAAAAAAAAAAmxMAAAAAAACcEwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAmhMAAAAAAACaEwAAAAAAAAAAAAAAAPC/"
				],
				[
					210,
					1,
					"insert",
					{
						"characters": " y"
					},
					"AgAAAJwTAAAAAAAAnRMAAAAAAAAAAAAAnRMAAAAAAACeEwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAnBMAAAAAAACcEwAAAAAAAAAAAAAAAPC/"
				],
				[
					212,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAAJ8TAAAAAAAAoBMAAAAAAAAAAAAAoBMAAAAAAACkEwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAnxMAAAAAAACfEwAAAAAAAAAAAAAAAPC/"
				],
				[
					213,
					2,
					"left_delete",
					null,
					"AgAAAKATAAAAAAAAoBMAAAAAAAAEAAAAICAgIJ8TAAAAAAAAnxMAAAAAAAABAAAACg",
					"AQAAAAAAAAABAAAApBMAAAAAAACkEwAAAAAAAAAAAAAAAPC/"
				],
				[
					215,
					1,
					"reindent",
					null,
					"AQAAAKATAAAAAAAApBMAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAoBMAAAAAAACgEwAAAAAAAAAAAAAAIGhA"
				],
				[
					216,
					1,
					"insert",
					{
						"characters": "return"
					},
					"BgAAAKQTAAAAAAAApRMAAAAAAAAAAAAApRMAAAAAAACmEwAAAAAAAAAAAACmEwAAAAAAAKcTAAAAAAAAAAAAAKcTAAAAAAAAqBMAAAAAAAAAAAAAqBMAAAAAAACpEwAAAAAAAAAAAACpEwAAAAAAAKoTAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAApBMAAAAAAACkEwAAAAAAAAAAAAAAAPC/"
				],
				[
					217,
					1,
					"insert",
					{
						"characters": " not"
					},
					"BAAAAKoTAAAAAAAAqxMAAAAAAAAAAAAAqxMAAAAAAACsEwAAAAAAAAAAAACsEwAAAAAAAK0TAAAAAAAAAAAAAK0TAAAAAAAArhMAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAqhMAAAAAAACqEwAAAAAAAAAAAAAAAPC/"
				],
				[
					218,
					1,
					"insert",
					{
						"characters": " Is"
					},
					"AwAAAK4TAAAAAAAArxMAAAAAAAAAAAAArxMAAAAAAACwEwAAAAAAAAAAAACwEwAAAAAAALETAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAArhMAAAAAAACuEwAAAAAAAAAAAAAAAPC/"
				],
				[
					219,
					1,
					"insert_completion",
					{
						"completion": "lsp_select_completion {\"index\":36,\"session_name\":\"LSP-lua\"}",
						"format": "command",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "IsColliding(x, y)"
					},
					"AgAAAK8TAAAAAAAArxMAAAAAAAACAAAASXOvEwAAAAAAALoTAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAsRMAAAAAAACxEwAAAAAAAAAAAAAAAPC/"
				],
				[
					220,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAALoTAAAAAAAAvBMAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAuhMAAAAAAAC6EwAAAAAAAAAAAAAAAPC/"
				],
				[
					221,
					1,
					"insert",
					{
						"characters": "x,"
					},
					"AgAAALsTAAAAAAAAvBMAAAAAAAAAAAAAvBMAAAAAAAC9EwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAuxMAAAAAAAC7EwAAAAAAAAAAAAAAAPC/"
				],
				[
					222,
					1,
					"insert",
					{
						"characters": " y"
					},
					"AgAAAL0TAAAAAAAAvhMAAAAAAAAAAAAAvhMAAAAAAAC/EwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAvRMAAAAAAAC9EwAAAAAAAAAAAAAAAPC/"
				],
				[
					225,
					1,
					"insert",
					{
						"characters": "\n\nfuncti"
					},
					"CAAAAMQTAAAAAAAAxRMAAAAAAAAAAAAAxRMAAAAAAADGEwAAAAAAAAAAAADGEwAAAAAAAMcTAAAAAAAAAAAAAMcTAAAAAAAAyBMAAAAAAAAAAAAAyBMAAAAAAADJEwAAAAAAAAAAAADJEwAAAAAAAMoTAAAAAAAAAAAAAMoTAAAAAAAAyxMAAAAAAAAAAAAAyxMAAAAAAADMEwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAxBMAAAAAAADEEwAAAAAAAAAAAAAAoGxA"
				],
				[
					226,
					1,
					"insert",
					{
						"characters": "on"
					},
					"AgAAAMwTAAAAAAAAzRMAAAAAAAAAAAAAzRMAAAAAAADOEwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAzBMAAAAAAADMEwAAAAAAAAAAAAAAAPC/"
				],
				[
					227,
					1,
					"insert",
					{
						"characters": " Re"
					},
					"AwAAAM4TAAAAAAAAzxMAAAAAAAAAAAAAzxMAAAAAAADQEwAAAAAAAAAAAADQEwAAAAAAANETAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAzhMAAAAAAADOEwAAAAAAAAAAAAAAAPC/"
				],
				[
					228,
					1,
					"insert",
					{
						"characters": "spanw"
					},
					"BQAAANETAAAAAAAA0hMAAAAAAAAAAAAA0hMAAAAAAADTEwAAAAAAAAAAAADTEwAAAAAAANQTAAAAAAAAAAAAANQTAAAAAAAA1RMAAAAAAAAAAAAA1RMAAAAAAADWEwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA0RMAAAAAAADREwAAAAAAAAAAAAAAAPC/"
				],
				[
					229,
					2,
					"left_delete",
					null,
					"AgAAANUTAAAAAAAA1RMAAAAAAAABAAAAd9QTAAAAAAAA1BMAAAAAAAABAAAAbg",
					"AQAAAAAAAAABAAAA1hMAAAAAAADWEwAAAAAAAAAAAAAAAPC/"
				],
				[
					230,
					1,
					"insert",
					{
						"characters": "qn"
					},
					"AgAAANQTAAAAAAAA1RMAAAAAAAAAAAAA1RMAAAAAAADWEwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA1BMAAAAAAADUEwAAAAAAAAAAAAAAAPC/"
				],
				[
					231,
					2,
					"left_delete",
					null,
					"AgAAANUTAAAAAAAA1RMAAAAAAAABAAAAbtQTAAAAAAAA1BMAAAAAAAABAAAAcQ",
					"AQAAAAAAAAABAAAA1hMAAAAAAADWEwAAAAAAAAAAAAAAAPC/"
				],
				[
					232,
					1,
					"insert",
					{
						"characters": "wnEnemies"
					},
					"CQAAANQTAAAAAAAA1RMAAAAAAAAAAAAA1RMAAAAAAADWEwAAAAAAAAAAAADWEwAAAAAAANcTAAAAAAAAAAAAANcTAAAAAAAA2BMAAAAAAAAAAAAA2BMAAAAAAADZEwAAAAAAAAAAAADZEwAAAAAAANoTAAAAAAAAAAAAANoTAAAAAAAA2xMAAAAAAAAAAAAA2xMAAAAAAADcEwAAAAAAAAAAAADcEwAAAAAAAN0TAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA1BMAAAAAAADUEwAAAAAAAAAAAAAAAPC/"
				],
				[
					233,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAAN0TAAAAAAAA3xMAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA3RMAAAAAAADdEwAAAAAAAAAAAAAAAPC/"
				],
				[
					235,
					1,
					"insert",
					{
						"characters": "\n\nend"
					},
					"CgAAAN8TAAAAAAAA4BMAAAAAAAAAAAAA4BMAAAAAAADkEwAAAAAAAAAAAADkEwAAAAAAAOUTAAAAAAAAAAAAAOUTAAAAAAAA6RMAAAAAAAAAAAAA4BMAAAAAAADgEwAAAAAAAAQAAAAgICAg5RMAAAAAAADmEwAAAAAAAAAAAADmEwAAAAAAAOcTAAAAAAAAAAAAAOcTAAAAAAAA6BMAAAAAAAAAAAAA4RMAAAAAAADhEwAAAAAAAAQAAAAgICAg4RMAAAAAAADhEwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA3xMAAAAAAADfEwAAAAAAAAAAAAAAAPC/"
				],
				[
					237,
					1,
					"reindent",
					null,
					"AQAAAOATAAAAAAAA5BMAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA4BMAAAAAAADgEwAAAAAAAAAAAAAAADVA"
				],
				[
					238,
					1,
					"insert",
					{
						"characters": "for"
					},
					"AwAAAOQTAAAAAAAA5RMAAAAAAAAAAAAA5RMAAAAAAADmEwAAAAAAAAAAAADmEwAAAAAAAOcTAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA5BMAAAAAAADkEwAAAAAAAAAAAAAAAPC/"
				],
				[
					239,
					1,
					"insert",
					{
						"characters": " _,"
					},
					"AwAAAOcTAAAAAAAA6BMAAAAAAAAAAAAA6BMAAAAAAADpEwAAAAAAAAAAAADpEwAAAAAAAOoTAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA5xMAAAAAAADnEwAAAAAAAAAAAAAAAPC/"
				],
				[
					240,
					1,
					"insert",
					{
						"characters": " enemi"
					},
					"BgAAAOoTAAAAAAAA6xMAAAAAAAAAAAAA6xMAAAAAAADsEwAAAAAAAAAAAADsEwAAAAAAAO0TAAAAAAAAAAAAAO0TAAAAAAAA7hMAAAAAAAAAAAAA7hMAAAAAAADvEwAAAAAAAAAAAADvEwAAAAAAAPATAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA6hMAAAAAAADqEwAAAAAAAAAAAAAAAPC/"
				],
				[
					241,
					1,
					"left_delete",
					null,
					"AQAAAO8TAAAAAAAA7xMAAAAAAAABAAAAaQ",
					"AQAAAAAAAAABAAAA8BMAAAAAAADwEwAAAAAAAAAAAAAAAPC/"
				],
				[
					242,
					1,
					"insert",
					{
						"characters": "y"
					},
					"AQAAAO8TAAAAAAAA8BMAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA7xMAAAAAAADvEwAAAAAAAAAAAAAAAPC/"
				],
				[
					243,
					1,
					"insert",
					{
						"characters": " in"
					},
					"AwAAAPATAAAAAAAA8RMAAAAAAAAAAAAA8RMAAAAAAADyEwAAAAAAAAAAAADyEwAAAAAAAPMTAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA8BMAAAAAAADwEwAAAAAAAAAAAAAAAPC/"
				],
				[
					244,
					1,
					"insert",
					{
						"characters": " ipairs"
					},
					"BwAAAPMTAAAAAAAA9BMAAAAAAAAAAAAA9BMAAAAAAAD1EwAAAAAAAAAAAAD1EwAAAAAAAPYTAAAAAAAAAAAAAPYTAAAAAAAA9xMAAAAAAAAAAAAA9xMAAAAAAAD4EwAAAAAAAAAAAAD4EwAAAAAAAPkTAAAAAAAAAAAAAPkTAAAAAAAA+hMAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA8xMAAAAAAADzEwAAAAAAAAAAAAAAAPC/"
				],
				[
					245,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAAPoTAAAAAAAA/BMAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA+hMAAAAAAAD6EwAAAAAAAAAAAAAAAPC/"
				],
				[
					246,
					1,
					"insert",
					{
						"characters": "ene"
					},
					"AwAAAPsTAAAAAAAA/BMAAAAAAAAAAAAA/BMAAAAAAAD9EwAAAAAAAAAAAAD9EwAAAAAAAP4TAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA+xMAAAAAAAD7EwAAAAAAAAAAAAAAAPC/"
				],
				[
					247,
					1,
					"insert_completion",
					{
						"completion": "lsp_select_completion {\"index\":0,\"session_name\":\"LSP-lua\"}",
						"format": "command",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "enemies"
					},
					"AgAAAPsTAAAAAAAA+xMAAAAAAAADAAAAZW5l+xMAAAAAAAACFAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA/hMAAAAAAAD+EwAAAAAAAAAAAAAAAPC/"
				],
				[
					249,
					1,
					"insert",
					{
						"characters": " do"
					},
					"AwAAAAMUAAAAAAAABBQAAAAAAAAAAAAABBQAAAAAAAAFFAAAAAAAAAAAAAAFFAAAAAAAAAYUAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAAxQAAAAAAAADFAAAAAAAAAAAAAAAAPC/"
				],
				[
					250,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAAYUAAAAAAAABxQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAABhQAAAAAAAAGFAAAAAAAAAAAAAAAAPC/"
				],
				[
					251,
					1,
					"left_delete",
					null,
					"AQAAAAYUAAAAAAAABhQAAAAAAAABAAAAIA",
					"AQAAAAAAAAABAAAABxQAAAAAAAAHFAAAAAAAAAAAAAAAAPC/"
				],
				[
					252,
					1,
					"insert",
					{
						"characters": "\n\nend"
					},
					"CwAAAAYUAAAAAAAABxQAAAAAAAAAAAAABxQAAAAAAAALFAAAAAAAAAAAAAALFAAAAAAAAA8UAAAAAAAAAAAAAA8UAAAAAAAAEBQAAAAAAAAAAAAAEBQAAAAAAAAYFAAAAAAAAAAAAAAHFAAAAAAAAAcUAAAAAAAACAAAACAgICAgICAgEBQAAAAAAAARFAAAAAAAAAAAAAARFAAAAAAAABIUAAAAAAAAAAAAABIUAAAAAAAAExQAAAAAAAAAAAAACBQAAAAAAAAIFAAAAAAAAAgAAAAgICAgICAgIAgUAAAAAAAADBQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAABhQAAAAAAAAGFAAAAAAAAAAAAAAAAPC/"
				],
				[
					254,
					1,
					"reindent",
					null,
					"AQAAAAcUAAAAAAAADxQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAABxQAAAAAAAAHFAAAAAAAAAAAAAAAAElA"
				],
				[
					255,
					1,
					"insert",
					{
						"characters": "while"
					},
					"BQAAAA8UAAAAAAAAEBQAAAAAAAAAAAAAEBQAAAAAAAARFAAAAAAAAAAAAAARFAAAAAAAABIUAAAAAAAAAAAAABIUAAAAAAAAExQAAAAAAAAAAAAAExQAAAAAAAAUFAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAADxQAAAAAAAAPFAAAAAAAAAAAAAAAAPC/"
				],
				[
					256,
					1,
					"insert",
					{
						"characters": " not"
					},
					"BAAAABQUAAAAAAAAFRQAAAAAAAAAAAAAFRQAAAAAAAAWFAAAAAAAAAAAAAAWFAAAAAAAABcUAAAAAAAAAAAAABcUAAAAAAAAGBQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAFBQAAAAAAAAUFAAAAAAAAAAAAAAAAPC/"
				],
				[
					257,
					1,
					"insert",
					{
						"characters": " IsV"
					},
					"BAAAABgUAAAAAAAAGRQAAAAAAAAAAAAAGRQAAAAAAAAaFAAAAAAAAAAAAAAaFAAAAAAAABsUAAAAAAAAAAAAABsUAAAAAAAAHBQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAGBQAAAAAAAAYFAAAAAAAAAAAAAAAAPC/"
				],
				[
					258,
					1,
					"insert_completion",
					{
						"completion": "lsp_select_completion {\"index\":38,\"session_name\":\"LSP-lua\"}",
						"format": "command",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "IsValidSpwan(x, y)"
					},
					"AgAAABkUAAAAAAAAGRQAAAAAAAADAAAASXNWGRQAAAAAAAAlFAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAHBQAAAAAAAAcFAAAAAAAAAAAAAAAAPC/"
				],
				[
					259,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAACUUAAAAAAAAJxQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAJRQAAAAAAAAlFAAAAAAAAAAAAAAAAPC/"
				],
				[
					260,
					1,
					"insert",
					{
						"characters": "enemy.x,"
					},
					"CAAAACYUAAAAAAAAJxQAAAAAAAAAAAAAJxQAAAAAAAAoFAAAAAAAAAAAAAAoFAAAAAAAACkUAAAAAAAAAAAAACkUAAAAAAAAKhQAAAAAAAAAAAAAKhQAAAAAAAArFAAAAAAAAAAAAAArFAAAAAAAACwUAAAAAAAAAAAAACwUAAAAAAAALRQAAAAAAAAAAAAALRQAAAAAAAAuFAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAJhQAAAAAAAAmFAAAAAAAAAAAAAAAAPC/"
				],
				[
					261,
					1,
					"insert",
					{
						"characters": " enemy."
					},
					"BwAAAC4UAAAAAAAALxQAAAAAAAAAAAAALxQAAAAAAAAwFAAAAAAAAAAAAAAwFAAAAAAAADEUAAAAAAAAAAAAADEUAAAAAAAAMhQAAAAAAAAAAAAAMhQAAAAAAAAzFAAAAAAAAAAAAAAzFAAAAAAAADQUAAAAAAAAAAAAADQUAAAAAAAANRQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAALhQAAAAAAAAuFAAAAAAAAAAAAAAAAPC/"
				],
				[
					262,
					1,
					"insert",
					{
						"characters": "y"
					},
					"AQAAADUUAAAAAAAANhQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAANRQAAAAAAAA1FAAAAAAAAAAAAAAAAPC/"
				],
				[
					264,
					1,
					"insert",
					{
						"characters": " do"
					},
					"AwAAADcUAAAAAAAAOBQAAAAAAAAAAAAAOBQAAAAAAAA5FAAAAAAAAAAAAAA5FAAAAAAAADoUAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAANxQAAAAAAAA3FAAAAAAAAAAAAAAAAPC/"
				],
				[
					265,
					1,
					"insert",
					{
						"characters": "\n\nend"
					},
					"CwAAADoUAAAAAAAAOxQAAAAAAAAAAAAAOxQAAAAAAABDFAAAAAAAAAAAAABDFAAAAAAAAEcUAAAAAAAAAAAAAEcUAAAAAAAASBQAAAAAAAAAAAAASBQAAAAAAABUFAAAAAAAAAAAAAA7FAAAAAAAADsUAAAAAAAADAAAACAgICAgICAgICAgIEgUAAAAAAAASRQAAAAAAAAAAAAASRQAAAAAAABKFAAAAAAAAAAAAABKFAAAAAAAAEsUAAAAAAAAAAAAADwUAAAAAAAAPBQAAAAAAAAMAAAAICAgICAgICAgICAgPBQAAAAAAABEFAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAOhQAAAAAAAA6FAAAAAAAAAAAAAAAAPC/"
				],
				[
					267,
					1,
					"reindent",
					null,
					"AQAAADsUAAAAAAAARxQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAOxQAAAAAAAA7FAAAAAAAAAAAAAAAwFNA"
				],
				[
					268,
					1,
					"insert",
					{
						"characters": "enemy.x"
					},
					"BwAAAEcUAAAAAAAASBQAAAAAAAAAAAAASBQAAAAAAABJFAAAAAAAAAAAAABJFAAAAAAAAEoUAAAAAAAAAAAAAEoUAAAAAAAASxQAAAAAAAAAAAAASxQAAAAAAABMFAAAAAAAAAAAAABMFAAAAAAAAE0UAAAAAAAAAAAAAE0UAAAAAAAAThQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAARxQAAAAAAABHFAAAAAAAAAAAAAAAAPC/"
				],
				[
					269,
					1,
					"insert",
					{
						"characters": " ="
					},
					"AgAAAE4UAAAAAAAATxQAAAAAAAAAAAAATxQAAAAAAABQFAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAThQAAAAAAABOFAAAAAAAAAAAAAAAAPC/"
				],
				[
					270,
					1,
					"insert",
					{
						"characters": " math.ra"
					},
					"CAAAAFAUAAAAAAAAURQAAAAAAAAAAAAAURQAAAAAAABSFAAAAAAAAAAAAABSFAAAAAAAAFMUAAAAAAAAAAAAAFMUAAAAAAAAVBQAAAAAAAAAAAAAVBQAAAAAAABVFAAAAAAAAAAAAABVFAAAAAAAAFYUAAAAAAAAAAAAAFYUAAAAAAAAVxQAAAAAAAAAAAAAVxQAAAAAAABYFAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAUBQAAAAAAABQFAAAAAAAAAAAAAAAAPC/"
				],
				[
					271,
					1,
					"insert",
					{
						"characters": "ndom"
					},
					"BAAAAFgUAAAAAAAAWRQAAAAAAAAAAAAAWRQAAAAAAABaFAAAAAAAAAAAAABaFAAAAAAAAFsUAAAAAAAAAAAAAFsUAAAAAAAAXBQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAWBQAAAAAAABYFAAAAAAAAAAAAAAAAPC/"
				],
				[
					272,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAAFwUAAAAAAAAXhQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAXBQAAAAAAABcFAAAAAAAAAAAAAAAAPC/"
				],
				[
					273,
					1,
					"insert",
					{
						"characters": "2,"
					},
					"AgAAAF0UAAAAAAAAXhQAAAAAAAAAAAAAXhQAAAAAAABfFAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAXRQAAAAAAABdFAAAAAAAAAAAAAAAAPC/"
				],
				[
					274,
					1,
					"insert",
					{
						"characters": " map.width"
					},
					"CgAAAF8UAAAAAAAAYBQAAAAAAAAAAAAAYBQAAAAAAABhFAAAAAAAAAAAAABhFAAAAAAAAGIUAAAAAAAAAAAAAGIUAAAAAAAAYxQAAAAAAAAAAAAAYxQAAAAAAABkFAAAAAAAAAAAAABkFAAAAAAAAGUUAAAAAAAAAAAAAGUUAAAAAAAAZhQAAAAAAAAAAAAAZhQAAAAAAABnFAAAAAAAAAAAAABnFAAAAAAAAGgUAAAAAAAAAAAAAGgUAAAAAAAAaRQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAXxQAAAAAAABfFAAAAAAAAAAAAAAAAPC/"
				],
				[
					275,
					1,
					"insert",
					{
						"characters": " -"
					},
					"AgAAAGkUAAAAAAAAahQAAAAAAAAAAAAAahQAAAAAAABrFAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAaRQAAAAAAABpFAAAAAAAAAAAAAAAAPC/"
				],
				[
					276,
					1,
					"insert",
					{
						"characters": " 2"
					},
					"AgAAAGsUAAAAAAAAbBQAAAAAAAAAAAAAbBQAAAAAAABtFAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAaxQAAAAAAABrFAAAAAAAAAAAAAAAAPC/"
				],
				[
					278,
					1,
					"insert",
					{
						"characters": "\nenemy.y"
					},
					"CQAAAG4UAAAAAAAAbxQAAAAAAAAAAAAAbxQAAAAAAAB7FAAAAAAAAAAAAAB7FAAAAAAAAHwUAAAAAAAAAAAAAHwUAAAAAAAAfRQAAAAAAAAAAAAAfRQAAAAAAAB+FAAAAAAAAAAAAAB+FAAAAAAAAH8UAAAAAAAAAAAAAH8UAAAAAAAAgBQAAAAAAAAAAAAAgBQAAAAAAACBFAAAAAAAAAAAAACBFAAAAAAAAIIUAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAbhQAAAAAAABuFAAAAAAAAAAAAAAAAPC/"
				],
				[
					279,
					1,
					"insert",
					{
						"characters": " ="
					},
					"AgAAAIIUAAAAAAAAgxQAAAAAAAAAAAAAgxQAAAAAAACEFAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAghQAAAAAAACCFAAAAAAAAAAAAAAAAPC/"
				],
				[
					280,
					1,
					"insert",
					{
						"characters": " math.ra"
					},
					"CAAAAIQUAAAAAAAAhRQAAAAAAAAAAAAAhRQAAAAAAACGFAAAAAAAAAAAAACGFAAAAAAAAIcUAAAAAAAAAAAAAIcUAAAAAAAAiBQAAAAAAAAAAAAAiBQAAAAAAACJFAAAAAAAAAAAAACJFAAAAAAAAIoUAAAAAAAAAAAAAIoUAAAAAAAAixQAAAAAAAAAAAAAixQAAAAAAACMFAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAhBQAAAAAAACEFAAAAAAAAAAAAAAAAPC/"
				],
				[
					281,
					1,
					"insert",
					{
						"characters": "ndom"
					},
					"BAAAAIwUAAAAAAAAjRQAAAAAAAAAAAAAjRQAAAAAAACOFAAAAAAAAAAAAACOFAAAAAAAAI8UAAAAAAAAAAAAAI8UAAAAAAAAkBQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAjBQAAAAAAACMFAAAAAAAAAAAAAAAAPC/"
				],
				[
					282,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAAJAUAAAAAAAAkhQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAkBQAAAAAAACQFAAAAAAAAAAAAAAAAPC/"
				],
				[
					283,
					1,
					"insert",
					{
						"characters": "2,"
					},
					"AgAAAJEUAAAAAAAAkhQAAAAAAAAAAAAAkhQAAAAAAACTFAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAkRQAAAAAAACRFAAAAAAAAAAAAAAAAPC/"
				],
				[
					284,
					1,
					"insert",
					{
						"characters": " map.hei"
					},
					"CAAAAJMUAAAAAAAAlBQAAAAAAAAAAAAAlBQAAAAAAACVFAAAAAAAAAAAAACVFAAAAAAAAJYUAAAAAAAAAAAAAJYUAAAAAAAAlxQAAAAAAAAAAAAAlxQAAAAAAACYFAAAAAAAAAAAAACYFAAAAAAAAJkUAAAAAAAAAAAAAJkUAAAAAAAAmhQAAAAAAAAAAAAAmhQAAAAAAACbFAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAkxQAAAAAAACTFAAAAAAAAAAAAAAAAPC/"
				],
				[
					285,
					1,
					"insert_completion",
					{
						"completion": "lsp_select_completion {\"index\":1,\"session_name\":\"LSP-lua\"}",
						"format": "command",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "height"
					},
					"AgAAAJgUAAAAAAAAmBQAAAAAAAADAAAAaGVpmBQAAAAAAACeFAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAmxQAAAAAAACbFAAAAAAAAAAAAAAAAPC/"
				],
				[
					286,
					1,
					"insert",
					{
						"characters": " -"
					},
					"AgAAAJ4UAAAAAAAAnxQAAAAAAAAAAAAAnxQAAAAAAACgFAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAnhQAAAAAAACeFAAAAAAAAAAAAAAAAPC/"
				],
				[
					287,
					1,
					"insert",
					{
						"characters": " 2"
					},
					"AgAAAKAUAAAAAAAAoRQAAAAAAAAAAAAAoRQAAAAAAACiFAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAoBQAAAAAAACgFAAAAAAAAAAAAAAAAPC/"
				],
				[
					303,
					1,
					"insert",
					{
						"characters": "Resp"
					},
					"BAAAACQIAAAAAAAAJQgAAAAAAAAAAAAAJQgAAAAAAAAmCAAAAAAAAAAAAAAmCAAAAAAAACcIAAAAAAAAAAAAACcIAAAAAAAAKAgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAJAgAAAAAAAAkCAAAAAAAAAAAAAAAAPC/"
				],
				[
					304,
					1,
					"insert_completion",
					{
						"completion": "lsp_select_completion {\"index\":5,\"session_name\":\"LSP-lua\"}",
						"format": "command",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "RespawnEnemies()"
					},
					"AgAAACQIAAAAAAAAJAgAAAAAAAAEAAAAUmVzcCQIAAAAAAAAMggAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAKAgAAAAAAAAoCAAAAAAAAAAAAAAAAPC/"
				],
				[
					305,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAADIIAAAAAAAANAgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAMggAAAAAAAAyCAAAAAAAAAAAAAAAAPC/"
				],
				[
					307,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AQAAADQIAAAAAAAANQgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAANAgAAAAAAAA0CAAAAAAAAAAAAAAAAPC/"
				],
				[
					314,
					34,
					"swap_line_down",
					null,
					"RAAAADYIAAAAAAAARwgAAAAAAAAAAAAAJAgAAAAAAAAkCAAAAAAAABEAAABSZXNwYXduRW5lbWllcygpClEIAAAAAAAAYggAAAAAAAAAAAAAJQgAAAAAAAAlCAAAAAAAABEAAABSZXNwYXduRW5lbWllcygpCmgIAAAAAAAAeQgAAAAAAAAAAAAAQAgAAAAAAABACAAAAAAAABEAAABSZXNwYXduRW5lbWllcygpCogIAAAAAAAAmQgAAAAAAAAAAAAAVwgAAAAAAABXCAAAAAAAABEAAABSZXNwYXduRW5lbWllcygpCqgIAAAAAAAAuQgAAAAAAAAAAAAAdwgAAAAAAAB3CAAAAAAAABEAAABSZXNwYXduRW5lbWllcygpCqkIAAAAAAAAuggAAAAAAAAAAAAAlwgAAAAAAACXCAAAAAAAABEAAABSZXNwYXduRW5lbWllcygpCvcIAAAAAAAACAkAAAAAAAAAAAAAmAgAAAAAAACYCAAAAAAAABEAAABSZXNwYXduRW5lbWllcygpCgsJAAAAAAAAHAkAAAAAAAAAAAAA5ggAAAAAAADmCAAAAAAAABEAAABSZXNwYXduRW5lbWllcygpChMJAAAAAAAAJAkAAAAAAAAAAAAA+ggAAAAAAAD6CAAAAAAAABEAAABSZXNwYXduRW5lbWllcygpChQJAAAAAAAAJQkAAAAAAAAAAAAAAgkAAAAAAAACCQAAAAAAABEAAABSZXNwYXduRW5lbWllcygpCk8JAAAAAAAAYAkAAAAAAAAAAAAAAwkAAAAAAAADCQAAAAAAABEAAABSZXNwYXduRW5lbWllcygpCpgJAAAAAAAAqQkAAAAAAAAAAAAAPgkAAAAAAAA+CQAAAAAAABEAAABSZXNwYXduRW5lbWllcygpCuEJAAAAAAAA8gkAAAAAAAAAAAAAhwkAAAAAAACHCQAAAAAAABEAAABSZXNwYXduRW5lbWllcygpCioKAAAAAAAAOwoAAAAAAAAAAAAA0AkAAAAAAADQCQAAAAAAABEAAABSZXNwYXduRW5lbWllcygpCnAKAAAAAAAAgQoAAAAAAAAAAAAAGQoAAAAAAAAZCgAAAAAAABEAAABSZXNwYXduRW5lbWllcygpCnQKAAAAAAAAhQoAAAAAAAAAAAAAXwoAAAAAAABfCgAAAAAAABEAAABSZXNwYXduRW5lbWllcygpCnUKAAAAAAAAhgoAAAAAAAAAAAAAYwoAAAAAAABjCgAAAAAAABEAAABSZXNwYXduRW5lbWllcygpCpYKAAAAAAAApwoAAAAAAAAAAAAAZAoAAAAAAABkCgAAAAAAABEAAABSZXNwYXduRW5lbWllcygpCq0KAAAAAAAAvgoAAAAAAAAAAAAAhQoAAAAAAACFCgAAAAAAABEAAABSZXNwYXduRW5lbWllcygpCvwKAAAAAAAADQsAAAAAAAAAAAAAnAoAAAAAAACcCgAAAAAAABEAAABSZXNwYXduRW5lbWllcygpCgALAAAAAAAAEQsAAAAAAAAAAAAA6woAAAAAAADrCgAAAAAAABEAAABSZXNwYXduRW5lbWllcygpCgELAAAAAAAAEgsAAAAAAAAAAAAA7woAAAAAAADvCgAAAAAAABEAAABSZXNwYXduRW5lbWllcygpChgLAAAAAAAAKQsAAAAAAAAAAAAA8AoAAAAAAADwCgAAAAAAABEAAABSZXNwYXduRW5lbWllcygpClgLAAAAAAAAaQsAAAAAAAAAAAAABwsAAAAAAAAHCwAAAAAAABEAAABSZXNwYXduRW5lbWllcygpCmkLAAAAAAAAegsAAAAAAAAAAAAARwsAAAAAAABHCwAAAAAAABEAAABSZXNwYXduRW5lbWllcygpCnELAAAAAAAAggsAAAAAAAAAAAAAWAsAAAAAAABYCwAAAAAAABEAAABSZXNwYXduRW5lbWllcygpCrILAAAAAAAAwwsAAAAAAAAAAAAAYAsAAAAAAABgCwAAAAAAABEAAABSZXNwYXduRW5lbWllcygpCtMLAAAAAAAA5AsAAAAAAAAAAAAAoQsAAAAAAAChCwAAAAAAABEAAABSZXNwYXduRW5lbWllcygpCtcLAAAAAAAA6AsAAAAAAAAAAAAAwgsAAAAAAADCCwAAAAAAABEAAABSZXNwYXduRW5lbWllcygpCtgLAAAAAAAA6QsAAAAAAAAAAAAAxgsAAAAAAADGCwAAAAAAABEAAABSZXNwYXduRW5lbWllcygpCu4LAAAAAAAA/wsAAAAAAAAAAAAAxwsAAAAAAADHCwAAAAAAABEAAABSZXNwYXduRW5lbWllcygpCu8LAAAAAAAAAAwAAAAAAAAAAAAA3QsAAAAAAADdCwAAAAAAABEAAABSZXNwYXduRW5lbWllcygpCgkMAAAAAAAAGgwAAAAAAAAAAAAA3gsAAAAAAADeCwAAAAAAABEAAABSZXNwYXduRW5lbWllcygpCh8MAAAAAAAAMAwAAAAAAAAAAAAA+AsAAAAAAAD4CwAAAAAAABEAAABSZXNwYXduRW5lbWllcygpCg",
					"AQAAAAAAAAABAAAANAgAAAAAAAA0CAAAAAAAAAAAAAAAAPC/"
				],
				[
					315,
					9,
					"swap_line_down",
					null,
					"EgAAAH8MAAAAAAAAkAwAAAAAAAAAAAAADgwAAAAAAAAODAAAAAAAABEAAABSZXNwYXduRW5lbWllcygpCrYMAAAAAAAAxwwAAAAAAAAAAAAAbgwAAAAAAABuDAAAAAAAABEAAABSZXNwYXduRW5lbWllcygpCv4MAAAAAAAADw0AAAAAAAAAAAAApQwAAAAAAAClDAAAAAAAABEAAABSZXNwYXduRW5lbWllcygpCgYNAAAAAAAAFw0AAAAAAAAAAAAA7QwAAAAAAADtDAAAAAAAABEAAABSZXNwYXduRW5lbWllcygpCgoNAAAAAAAAGw0AAAAAAAAAAAAA9QwAAAAAAAD1DAAAAAAAABEAAABSZXNwYXduRW5lbWllcygpCgsNAAAAAAAAHA0AAAAAAAAAAAAA+QwAAAAAAAD5DAAAAAAAABEAAABSZXNwYXduRW5lbWllcygpCk0NAAAAAAAAXg0AAAAAAAAAAAAA+gwAAAAAAAD6DAAAAAAAABEAAABSZXNwYXduRW5lbWllcygpCmUNAAAAAAAAdg0AAAAAAAAAAAAAPA0AAAAAAAA8DQAAAAAAABEAAABSZXNwYXduRW5lbWllcygpCpUNAAAAAAAApg0AAAAAAAAAAAAAVA0AAAAAAABUDQAAAAAAABEAAABSZXNwYXduRW5lbWllcygpCg",
					"AQAAAAAAAAABAAAAHgwAAAAAAAAeDAAAAAAAAAAAAAAAAPC/"
				],
				[
					316,
					24,
					"swap_line_down",
					null,
					"MAAAAMUNAAAAAAAA1g0AAAAAAAAAAAAAhA0AAAAAAACEDQAAAAAAABEAAABSZXNwYXduRW5lbWllcygpChAOAAAAAAAAIQ4AAAAAAAAAAAAAtA0AAAAAAAC0DQAAAAAAABEAAABSZXNwYXduRW5lbWllcygpCkMOAAAAAAAAVA4AAAAAAAAAAAAA/w0AAAAAAAD/DQAAAAAAABEAAABSZXNwYXduRW5lbWllcygpCnYOAAAAAAAAhw4AAAAAAAAAAAAAMg4AAAAAAAAyDgAAAAAAABEAAABSZXNwYXduRW5lbWllcygpCncOAAAAAAAAiA4AAAAAAAAAAAAAZQ4AAAAAAABlDgAAAAAAABEAAABSZXNwYXduRW5lbWllcygpCq4OAAAAAAAAvw4AAAAAAAAAAAAAZg4AAAAAAABmDgAAAAAAABEAAABSZXNwYXduRW5lbWllcygpCuUOAAAAAAAA9g4AAAAAAAAAAAAAnQ4AAAAAAACdDgAAAAAAABEAAABSZXNwYXduRW5lbWllcygpClkPAAAAAAAAag8AAAAAAAAAAAAA1A4AAAAAAADUDgAAAAAAABEAAABSZXNwYXduRW5lbWllcygpCs0PAAAAAAAA3g8AAAAAAAAAAAAASA8AAAAAAABIDwAAAAAAABEAAABSZXNwYXduRW5lbWllcygpCs4PAAAAAAAA3w8AAAAAAAAAAAAAvA8AAAAAAAC8DwAAAAAAABEAAABSZXNwYXduRW5lbWllcygpCvoPAAAAAAAACxAAAAAAAAAAAAAAvQ8AAAAAAAC9DwAAAAAAABEAAABSZXNwYXduRW5lbWllcygpCiEQAAAAAAAAMhAAAAAAAAAAAAAA6Q8AAAAAAADpDwAAAAAAABEAAABSZXNwYXduRW5lbWllcygpCkcQAAAAAAAAWBAAAAAAAAAAAAAAEBAAAAAAAAAQEAAAAAAAABEAAABSZXNwYXduRW5lbWllcygpCnYQAAAAAAAAhxAAAAAAAAAAAAAANhAAAAAAAAA2EAAAAAAAABEAAABSZXNwYXduRW5lbWllcygpCpYQAAAAAAAApxAAAAAAAAAAAAAAZRAAAAAAAABlEAAAAAAAABEAAABSZXNwYXduRW5lbWllcygpCqsQAAAAAAAAvBAAAAAAAAAAAAAAhRAAAAAAAACFEAAAAAAAABEAAABSZXNwYXduRW5lbWllcygpCrgQAAAAAAAAyRAAAAAAAAAAAAAAmhAAAAAAAACaEAAAAAAAABEAAABSZXNwYXduRW5lbWllcygpCucQAAAAAAAA+BAAAAAAAAAAAAAApxAAAAAAAACnEAAAAAAAABEAAABSZXNwYXduRW5lbWllcygpCgcRAAAAAAAAGBEAAAAAAAAAAAAA1hAAAAAAAADWEAAAAAAAABEAAABSZXNwYXduRW5lbWllcygpChwRAAAAAAAALREAAAAAAAAAAAAA9hAAAAAAAAD2EAAAAAAAABEAAABSZXNwYXduRW5lbWllcygpCigRAAAAAAAAOREAAAAAAAAAAAAACxEAAAAAAAALEQAAAAAAABEAAABSZXNwYXduRW5lbWllcygpClERAAAAAAAAYhEAAAAAAAAAAAAAFxEAAAAAAAAXEQAAAAAAABEAAABSZXNwYXduRW5lbWllcygpCmgRAAAAAAAAeREAAAAAAAAAAAAAQBEAAAAAAABAEQAAAAAAABEAAABSZXNwYXduRW5lbWllcygpCsQRAAAAAAAA1REAAAAAAAAAAAAAVxEAAAAAAABXEQAAAAAAABEAAABSZXNwYXduRW5lbWllcygpCg",
					"AQAAAAAAAAABAAAAlA0AAAAAAACUDQAAAAAAAAAAAAAAAPC/"
				],
				[
					317,
					27,
					"swap_line_down",
					null,
					"NgAAANARAAAAAAAA4REAAAAAAAAAAAAAsxEAAAAAAACzEQAAAAAAABEAAABSZXNwYXduRW5lbWllcygpCtgRAAAAAAAA6REAAAAAAAAAAAAAvxEAAAAAAAC/EQAAAAAAABEAAABSZXNwYXduRW5lbWllcygpCtkRAAAAAAAA6hEAAAAAAAAAAAAAxxEAAAAAAADHEQAAAAAAABEAAABSZXNwYXduRW5lbWllcygpCusRAAAAAAAA/BEAAAAAAAAAAAAAyBEAAAAAAADIEQAAAAAAABEAAABSZXNwYXduRW5lbWllcygpCgESAAAAAAAAEhIAAAAAAAAAAAAA2hEAAAAAAADaEQAAAAAAABEAAABSZXNwYXduRW5lbWllcygpCi4SAAAAAAAAPxIAAAAAAAAAAAAA8BEAAAAAAADwEQAAAAAAABEAAABSZXNwYXduRW5lbWllcygpCjcSAAAAAAAASBIAAAAAAAAAAAAAHRIAAAAAAAAdEgAAAAAAABEAAABSZXNwYXduRW5lbWllcygpCmQSAAAAAAAAdRIAAAAAAAAAAAAAJhIAAAAAAAAmEgAAAAAAABEAAABSZXNwYXduRW5lbWllcygpCmwSAAAAAAAAfRIAAAAAAAAAAAAAUxIAAAAAAABTEgAAAAAAABEAAABSZXNwYXduRW5lbWllcygpCq8SAAAAAAAAwBIAAAAAAAAAAAAAWxIAAAAAAABbEgAAAAAAABEAAABSZXNwYXduRW5lbWllcygpChATAAAAAAAAIRMAAAAAAAAAAAAAnhIAAAAAAACeEgAAAAAAABEAAABSZXNwYXduRW5lbWllcygpClcTAAAAAAAAaBMAAAAAAAAAAAAA/xIAAAAAAAD/EgAAAAAAABEAAABSZXNwYXduRW5lbWllcygpClgTAAAAAAAAaRMAAAAAAAAAAAAARhMAAAAAAABGEwAAAAAAABEAAABSZXNwYXduRW5lbWllcygpCpATAAAAAAAAoRMAAAAAAAAAAAAARxMAAAAAAABHEwAAAAAAABEAAABSZXNwYXduRW5lbWllcygpCpQTAAAAAAAApRMAAAAAAAAAAAAAfxMAAAAAAAB/EwAAAAAAABEAAABSZXNwYXduRW5lbWllcygpCpUTAAAAAAAAphMAAAAAAAAAAAAAgxMAAAAAAACDEwAAAAAAABEAAABSZXNwYXduRW5lbWllcygpCrETAAAAAAAAwhMAAAAAAAAAAAAAhBMAAAAAAACEEwAAAAAAABEAAABSZXNwYXduRW5lbWllcygpCtITAAAAAAAA4xMAAAAAAAAAAAAAoBMAAAAAAACgEwAAAAAAABEAAABSZXNwYXduRW5lbWllcygpCtYTAAAAAAAA5xMAAAAAAAAAAAAAwRMAAAAAAADBEwAAAAAAABEAAABSZXNwYXduRW5lbWllcygpCtcTAAAAAAAA6BMAAAAAAAAAAAAAxRMAAAAAAADFEwAAAAAAABEAAABSZXNwYXduRW5lbWllcygpCvETAAAAAAAAAhQAAAAAAAAAAAAAxhMAAAAAAADGEwAAAAAAABEAAABSZXNwYXduRW5lbWllcygpChgUAAAAAAAAKRQAAAAAAAAAAAAA4BMAAAAAAADgEwAAAAAAABEAAABSZXNwYXduRW5lbWllcygpCkwUAAAAAAAAXRQAAAAAAAAAAAAABxQAAAAAAAAHFAAAAAAAABEAAABSZXNwYXduRW5lbWllcygpCoAUAAAAAAAAkRQAAAAAAAAAAAAAOxQAAAAAAAA7FAAAAAAAABEAAABSZXNwYXduRW5lbWllcygpCrUUAAAAAAAAxhQAAAAAAAAAAAAAbxQAAAAAAABvFAAAAAAAABEAAABSZXNwYXduRW5lbWllcygpCsEUAAAAAAAA0hQAAAAAAAAAAAAApBQAAAAAAACkFAAAAAAAABEAAABSZXNwYXduRW5lbWllcygpCskUAAAAAAAA2hQAAAAAAAAAAAAAsBQAAAAAAACwFAAAAAAAABEAAABSZXNwYXduRW5lbWllcygpCg",
					"AQAAAAAAAAABAAAAwxEAAAAAAADDEQAAAAAAAAAAAAAAAPC/"
				],
				[
					318,
					11,
					"swap_line_down",
					null,
					"FgAAAM0UAAAAAAAA3hQAAAAAAAAAAAAAuBQAAAAAAAC4FAAAAAAAABEAAABSZXNwYXduRW5lbWllcygpCs4UAAAAAAAA3xQAAAAAAAAAAAAAvBQAAAAAAAC8FAAAAAAAABEAAABSZXNwYXduRW5lbWllcygpCukUAAAAAAAA+hQAAAAAAAAAAAAAvRQAAAAAAAC9FAAAAAAAABEAAABSZXNwYXduRW5lbWllcygpChAVAAAAAAAAIRUAAAAAAAAAAAAA2BQAAAAAAADYFAAAAAAAABEAAABSZXNwYXduRW5lbWllcygpCjwVAAAAAAAATRUAAAAAAAAAAAAA/xQAAAAAAAD/FAAAAAAAABEAAABSZXNwYXduRW5lbWllcygpCmgVAAAAAAAAeRUAAAAAAAAAAAAAKxUAAAAAAAArFQAAAAAAABEAAABSZXNwYXduRW5lbWllcygpCpwVAAAAAAAArRUAAAAAAAAAAAAAVxUAAAAAAABXFQAAAAAAABEAAABSZXNwYXduRW5lbWllcygpCp0VAAAAAAAArhUAAAAAAAAAAAAAixUAAAAAAACLFQAAAAAAABEAAABSZXNwYXduRW5lbWllcygpCtEVAAAAAAAA4hUAAAAAAAAAAAAAjBUAAAAAAACMFQAAAAAAABEAAABSZXNwYXduRW5lbWllcygpCgEWAAAAAAAAEhYAAAAAAAAAAAAAwBUAAAAAAADAFQAAAAAAABEAAABSZXNwYXduRW5lbWllcygpChQWAAAAAAAAJRYAAAAAAAAAAAAA8BUAAAAAAADwFQAAAAAAABEAAABSZXNwYXduRW5lbWllcygpCg",
					"AQAAAAAAAAABAAAAyBQAAAAAAADIFAAAAAAAAAAAAAAAAPC/"
				],
				[
					319,
					2,
					"swap_line_up",
					null,
					"BAAAAAMWAAAAAAAAAxYAAAAAAAARAAAAUmVzcGF3bkVuZW1pZXMoKQrwFQAAAAAAAAEWAAAAAAAAAAAAAPAVAAAAAAAA8BUAAAAAAAARAAAAUmVzcGF3bkVuZW1pZXMoKQrAFQAAAAAAANEVAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAExYAAAAAAAATFgAAAAAAAAAAAAAAAPC/"
				],
				[
					320,
					20,
					"swap_line_down",
					null,
					"KAAAAAEWAAAAAAAAEhYAAAAAAAAAAAAAwBUAAAAAAADAFQAAAAAAABEAAABSZXNwYXduRW5lbWllcygpChQWAAAAAAAAJRYAAAAAAAAAAAAA8BUAAAAAAADwFQAAAAAAABEAAABSZXNwYXduRW5lbWllcygpCiAWAAAAAAAAMRYAAAAAAAAAAAAAAxYAAAAAAAADFgAAAAAAABEAAABSZXNwYXduRW5lbWllcygpCiEWAAAAAAAAMhYAAAAAAAAAAAAADxYAAAAAAAAPFgAAAAAAABEAAABSZXNwYXduRW5lbWllcygpClEWAAAAAAAAYhYAAAAAAAAAAAAAEBYAAAAAAAAQFgAAAAAAABEAAABSZXNwYXduRW5lbWllcygpCnAWAAAAAAAAgRYAAAAAAAAAAAAAQBYAAAAAAABAFgAAAAAAABEAAABSZXNwYXduRW5lbWllcygpCtIWAAAAAAAA4xYAAAAAAAAAAAAAXxYAAAAAAABfFgAAAAAAABEAAABSZXNwYXduRW5lbWllcygpChkXAAAAAAAAKhcAAAAAAAAAAAAAwRYAAAAAAADBFgAAAAAAABEAAABSZXNwYXduRW5lbWllcygpCmAXAAAAAAAAcRcAAAAAAAAAAAAACBcAAAAAAAAIFwAAAAAAABEAAABSZXNwYXduRW5lbWllcygpCmEXAAAAAAAAchcAAAAAAAAAAAAATxcAAAAAAABPFwAAAAAAABEAAABSZXNwYXduRW5lbWllcygpCpMXAAAAAAAApBcAAAAAAAAAAAAAUBcAAAAAAABQFwAAAAAAABEAAABSZXNwYXduRW5lbWllcygpCsUXAAAAAAAA1hcAAAAAAAAAAAAAghcAAAAAAACCFwAAAAAAABEAAABSZXNwYXduRW5lbWllcygpCsYXAAAAAAAA1xcAAAAAAAAAAAAAtBcAAAAAAAC0FwAAAAAAABEAAABSZXNwYXduRW5lbWllcygpCjYYAAAAAAAARxgAAAAAAAAAAAAAtRcAAAAAAAC1FwAAAAAAABEAAABSZXNwYXduRW5lbWllcygpCqYYAAAAAAAAtxgAAAAAAAAAAAAAJRgAAAAAAAAlGAAAAAAAABEAAABSZXNwYXduRW5lbWllcygpCqcYAAAAAAAAuBgAAAAAAAAAAAAAlRgAAAAAAACVGAAAAAAAABEAAABSZXNwYXduRW5lbWllcygpCsQYAAAAAAAA1RgAAAAAAAAAAAAAlhgAAAAAAACWGAAAAAAAABEAAABSZXNwYXduRW5lbWllcygpCuYYAAAAAAAA9xgAAAAAAAAAAAAAsxgAAAAAAACzGAAAAAAAABEAAABSZXNwYXduRW5lbWllcygpCvYYAAAAAAAABxkAAAAAAAAAAAAA1RgAAAAAAADVGAAAAAAAABEAAABSZXNwYXduRW5lbWllcygpChMZAAAAAAAAJBkAAAAAAAAAAAAA5RgAAAAAAADlGAAAAAAAABEAAABSZXNwYXduRW5lbWllcygpCg",
					"AQAAAAAAAAABAAAA0BUAAAAAAADQFQAAAAAAAAAAAAAAAPC/"
				],
				[
					321,
					13,
					"swap_line_down",
					null,
					"GgAAADUZAAAAAAAARhkAAAAAAAAAAAAAAhkAAAAAAAACGQAAAAAAABEAAABSZXNwYXduRW5lbWllcygpCkUZAAAAAAAAVhkAAAAAAAAAAAAAJBkAAAAAAAAkGQAAAAAAABEAAABSZXNwYXduRW5lbWllcygpCkYZAAAAAAAAVxkAAAAAAAAAAAAANBkAAAAAAAA0GQAAAAAAABEAAABSZXNwYXduRW5lbWllcygpCngZAAAAAAAAiRkAAAAAAAAAAAAANRkAAAAAAAA1GQAAAAAAABEAAABSZXNwYXduRW5lbWllcygpCq4ZAAAAAAAAvxkAAAAAAAAAAAAAZxkAAAAAAABnGQAAAAAAABEAAABSZXNwYXduRW5lbWllcygpCq8ZAAAAAAAAwBkAAAAAAAAAAAAAnRkAAAAAAACdGQAAAAAAABEAAABSZXNwYXduRW5lbWllcygpCuMZAAAAAAAA9BkAAAAAAAAAAAAAnhkAAAAAAACeGQAAAAAAABEAAABSZXNwYXduRW5lbWllcygpCicaAAAAAAAAOBoAAAAAAAAAAAAA0hkAAAAAAADSGQAAAAAAABEAAABSZXNwYXduRW5lbWllcygpClcaAAAAAAAAaBoAAAAAAAAAAAAAFhoAAAAAAAAWGgAAAAAAABEAAABSZXNwYXduRW5lbWllcygpCp8aAAAAAAAAsBoAAAAAAAAAAAAARhoAAAAAAABGGgAAAAAAABEAAABSZXNwYXduRW5lbWllcygpCs8aAAAAAAAA4BoAAAAAAAAAAAAAjhoAAAAAAACOGgAAAAAAABEAAABSZXNwYXduRW5lbWllcygpCucaAAAAAAAA+BoAAAAAAAAAAAAAvhoAAAAAAAC+GgAAAAAAABEAAABSZXNwYXduRW5lbWllcygpCvwaAAAAAAAADRsAAAAAAAAAAAAA1hoAAAAAAADWGgAAAAAAABEAAABSZXNwYXduRW5lbWllcygpCg",
					"AQAAAAAAAAABAAAAEhkAAAAAAAASGQAAAAAAAAAAAAAAAPC/"
				],
				[
					322,
					10,
					"swap_line_down",
					null,
					"FAAAAEAbAAAAAAAAURsAAAAAAAAAAAAA6xoAAAAAAADrGgAAAAAAABEAAABSZXNwYXduRW5lbWllcygpCnAbAAAAAAAAgRsAAAAAAAAAAAAALxsAAAAAAAAvGwAAAAAAABEAAABSZXNwYXduRW5lbWllcygpCrgbAAAAAAAAyRsAAAAAAAAAAAAAXxsAAAAAAABfGwAAAAAAABEAAABSZXNwYXduRW5lbWllcygpCugbAAAAAAAA+RsAAAAAAAAAAAAApxsAAAAAAACnGwAAAAAAABEAAABSZXNwYXduRW5lbWllcygpCgAcAAAAAAAAERwAAAAAAAAAAAAA1xsAAAAAAADXGwAAAAAAABEAAABSZXNwYXduRW5lbWllcygpChQcAAAAAAAAJRwAAAAAAAAAAAAA7xsAAAAAAADvGwAAAAAAABEAAABSZXNwYXduRW5lbWllcygpCiQcAAAAAAAANRwAAAAAAAAAAAAAAxwAAAAAAAADHAAAAAAAABEAAABSZXNwYXduRW5lbWllcygpCjAcAAAAAAAAQRwAAAAAAAAAAAAAExwAAAAAAAATHAAAAAAAABEAAABSZXNwYXduRW5lbWllcygpCjgcAAAAAAAASRwAAAAAAAAAAAAAHxwAAAAAAAAfHAAAAAAAABEAAABSZXNwYXduRW5lbWllcygpCjwcAAAAAAAATRwAAAAAAAAAAAAAJxwAAAAAAAAnHAAAAAAAABEAAABSZXNwYXduRW5lbWllcygpCg",
					"AQAAAAAAAAABAAAA+xoAAAAAAAD7GgAAAAAAAAAAAAAAAPC/"
				],
				[
					323,
					2,
					"swap_line_down",
					null,
					"BAAAAD0cAAAAAAAAThwAAAAAAAAAAAAAKxwAAAAAAAArHAAAAAAAABEAAABSZXNwYXduRW5lbWllcygpClYcAAAAAAAAZxwAAAAAAAAAAAAALBwAAAAAAAAsHAAAAAAAABEAAABSZXNwYXduRW5lbWllcygpCg",
					"AQAAAAAAAAABAAAAOxwAAAAAAAA7HAAAAAAAAAAAAAAAAPC/"
				],
				[
					331,
					2,
					"left_delete",
					null,
					"AgAAAEUcAAAAAAAARRwAAAAAAAAQAAAAUmVzcGF3bkVuZW1pZXMoKUQcAAAAAAAARBwAAAAAAAABAAAACg",
					"AQAAAAAAAAABAAAAVRwAAAAAAABFHAAAAAAAAAAAAAAAAPC/"
				],
				[
					335,
					2,
					"left_delete",
					null,
					"AgAAAIQTAAAAAAAAhBMAAAAAAAA3AQAAZnVuY3Rpb24gSXNWYWxpZFNwd2FuKHgsIHkpCiAgICByZXR1cm4gbm90IElzQ29sbGlkaW5nKHgsIHkpCmVuZAoKZnVuY3Rpb24gUmVzcGF3bkVuZW1pZXMoKQogICAgZm9yIF8sIGVuZW15IGluIGlwYWlycyhlbmVtaWVzKSBkbwogICAgICAgIHdoaWxlIG5vdCBJc1ZhbGlkU3B3YW4oZW5lbXkueCwgZW5lbXkueSkgZG8KICAgICAgICAgICAgZW5lbXkueCA9IG1hdGgucmFuZG9tKDIsIG1hcC53aWR0aCAtIDIpCiAgICAgICAgICAgIGVuZW15LnkgPSBtYXRoLnJhbmRvbSgyLCBtYXAuaGVpZ2h0IC0gMikKICAgICAgICBlbmQKICAgIGVuZAplbmSDEwAAAAAAAIMTAAAAAAAAAQAAAAo",
					"AQAAAAAAAAABAAAAhBMAAAAAAAC7FAAAAAAAAAAAAAAAAPC/"
				],
				[
					337,
					1,
					"left_delete",
					null,
					"AQAAAIMTAAAAAAAAgxMAAAAAAAABAAAACg",
					"AQAAAAAAAAABAAAAhBMAAAAAAACEEwAAAAAAAAAAAAAAAAAA"
				],
				[
					339,
					1,
					"lsp_apply_document_edit",
					{
						"changes":
						[
							{
								"newText": "--[[\n    =======================================================\n     -- RayCasting implementation done with Love2D\n     -- Author: Mikey\n     -- Date: 2/8/2025\n    =======================================================\n]]\n--\nlove.graphics.setDefaultFilter(\"nearest\", \"nearest\")\nlove.mouse.setRelativeMode(true)\n\n\nlocal player = {\n    x = 4,\n    y = 4,\n    angle = 0,\n    pitch = 0,\n    fov = math.pi / 3,\n    speed = 3,\n    sensitivity = 0.002,\n}\n\nlocal enemies = {\n    { x = 15, y = 9,  speed = 1.5, direction = 1, color = { 1, 0, 0 } }, -- Red\n    { x = 3,  y = 12, speed = 1.3, direction = 1, color = { 0, 1, 0 } }, -- Green\n    { x = 8,  y = 6,  speed = 1.7, direction = 1, color = { 0, 0, 1 } }, -- Blue\n    { x = 12, y = 3,  speed = 1.2, direction = 1, color = { 1, 1, 0 } }, -- Yellow\n    { x = 6,  y = 3,  speed = 1.4, direction = 1, color = { 1, 0, 1 } }  -- Purple\n}\n\nlocal map = {\n    width = 16,\n    height = 16,\n    data = {\n        1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n        1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1,\n        1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1,\n        1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1,\n        1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1,\n        1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1,\n        1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1,\n        1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1,\n        1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1,\n        1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1,\n        1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1,\n        1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1,\n        1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1,\n        1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1,\n        1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1\n    }\n}\n\nlocal textures = {\n    wall = love.graphics.newImage(\"res/mossy.png\"),\n    quads = {}\n}\ntextures.wall:setFilter(\"nearest\", \"nearest\")\n\nfor i = 0, textures.wall:getWidth() - 1 do\n    textures.quads[i] = love.graphics.newQuad(i, 0, 1, textures.wall:getHeight(), textures.wall:getDimensions())\nend\n\n\nfunction IsColliding(x, y)\n    local buffer = 0.2\n    local tileX = math.floor(x)\n    local tileY = math.floor(y)\n\n    if tileX < 1 or tileX > map.width or tileY < 1 or tileY > map.height then\n        return true\n    end\n\n    return map.data[tileY * map.width + tileX + 1] == 1 or\n        map.data[tileY * map.width + math.floor(x - buffer) + 1] == 1 or\n        map.data[tileY * map.width + math.floor(x + buffer) + 1] == 1 or\n        map.data[math.floor(y - buffer) * map.width + tileX + 1] == 1 or\n        map.data[math.floor(y + buffer) * map.width + tileX + 1] == 1\nend\n\nfunction IsPlayerColliding(x, y)\n    local buffer = 0.3\n    return math.abs(x - player.x) < buffer and math.abs(y - player.y) < buffer\nend\n\nfunction map:get(x, y)\n    if x < 1 or x > self.width or y < 1 or y > self.height then\n        return 1\n    end\n    local index = math.floor(y) * self.width + math.floor(x) + 1\n    return self.data[index] or 1\nend\n\nlocal rayResults = {}\n\nfunction PreComputeRays()\n    for i = 0, 119 do\n        local rayAngle             = player.angle - (player.fov / 2) + ((i / 119) * player.fov)\n        local distance, side, texX = CastRay(rayAngle)\n        rayResults[i]              = { distance, side, texX, rayAngle }\n    end\nend\n\n-- Raycasting optimized with DDA to better calculate distance and\nfunction CastRay(angle)\n    local sinA                = math.sin(angle)\n    local cosA                = math.cos(angle)\n    local mapX, mapY          = math.floor(player.x), math.floor(player.y)\n    local deltaDistX          = math.abs(1 / cosA)\n    local deltaDistY          = math.abs(1 / sinA)\n\n    local stepX               = (cosA < 0) and -1 or 1\n    local stepY               = (sinA < 0) and -1 or 1\n    local sideDistX           = (cosA < 0) and (player.x - mapX) * deltaDistX or (mapX + 1 - player.x) * deltaDistX\n    local sideDistY           = (sinA < 0) and (player.y - mapY) * deltaDistY or (mapY + 1 - player.y) * deltaDistY\n\n    local hit, side, distance = false, 0, 0\n    while not hit and distance < 16 do\n        if sideDistX < sideDistY then\n            sideDistX = sideDistX + deltaDistX\n            mapX = mapX + stepX\n            side = 0\n        else\n            sideDistY = sideDistY + deltaDistY\n            mapY = mapY + stepY\n            side = 1\n        end\n        if map:get(mapX, mapY) == 1 then\n            hit = true\n            distance = (side == 0) and (sideDistX - deltaDistX) or (sideDistY - deltaDistY)\n        end\n    end\n\n    local wallHit\n    if side == 0 then\n        wallHit = player.y + distance * sinA\n    else\n        wallHit = player.x + distance * cosA\n    end\n    wallHit = wallHit - math.floor(wallHit) -- Get fractional part\n    local texX = math.floor(wallHit * textures.wall:getWidth() + 0.5) % textures.wall:getWidth()\n    --texX = math.max(0, math.min(textures.wall:getWidth() - 1, texX))\n\n    return distance, side, texX -- Texture X coordinate\nend\n\nfunction UpdateEnemies(dt)\n    for _, enemy in ipairs(enemies) do\n        local dx       = player.x - enemy.x\n        local dy       = player.y - enemy.y\n        local distance = math.sqrt(dx ^ 2 + dy ^ 2)\n\n        if IsPlayerColliding(enemy.x, enemy.y) then\n            print(\"ENEMY COLLIDED WITH PLAYER\")\n            return\n        end\n\n        -- Move towards player if not too close\n        if distance > 0.3 then\n            local approachSpeed = math.min(enemy.speed, distance * 1.5) -- Slows down near player\n            local moveX         = (dx / distance) * approachSpeed * dt\n            local moveY         = (dy / distance) * approachSpeed * dt\n\n            local futureX       = enemy.x + moveX\n            local futureY       = enemy.y + moveY\n\n            local canMoveX      = not IsColliding(futureX, enemy.y) and not IsPlayerColliding(futureX, enemy.y)\n            local canMoveY      = not IsColliding(enemy.x, futureY) and not IsPlayerColliding(enemy.x, futureY)\n\n            if canMoveX then\n                enemy.x = futureX\n            end\n            if canMoveY then\n                enemy.y = futureY\n            end\n\n            if not canMoveX and not canMoveY then\n                print(\"ENEMY STUCK: TRYING TO SLIDE\")\n\n                if math.abs(dx) > math.abs(dy) then\n                    if not IsColliding(enemy.x, enemy.y + 0.3) then\n                        enemy.y = enemy.y + 0.3\n                    elseif not IsColliding(enemy.x, enemy.y - 0.3) then\n                        enemy.y = enemy.y - 0.3\n                    end\n                else\n                    if not IsColliding(enemy.x + 0.3, enemy.y) then\n                        enemy.x = enemy.x + 0.3\n                    elseif not IsColliding(enemy.x - 0.3, enemy.y) then\n                        enemy.x = enemy.x - 0.3\n                    end\n                end\n            end\n        end\n    end\nend\n\nfunction love.update(dt)\n    PreComputeRays()\n    UpdateEnemies(dt)\n\n    local isRunning   = love.keyboard.isDown(\"lshift\") or love.keyboard.isDown(\"rshift\")\n    local moveSpeed   = (isRunning and 4 or 2) * dt -- Sprinting speed\n    local strafeSpeed = moveSpeed * 0.7             -- Modify as needed\n    local rotSpeed    = 1.6 * dt\n\n    local newX        = player.x\n    local newY        = player.y\n\n\n    if love.keyboard.isDown(\"w\") then\n        newX = player.x + math.cos(player.angle) * moveSpeed\n        newY = player.y + math.sin(player.angle) * moveSpeed\n    end\n    if love.keyboard.isDown(\"s\") then\n        newX = player.x - math.cos(player.angle) * moveSpeed\n        newY = player.y - math.sin(player.angle) * moveSpeed\n    end\n    if love.keyboard.isDown(\"a\") then\n        newX = player.x + math.sin(player.angle) * strafeSpeed\n        newY = player.y - math.cos(player.angle) * strafeSpeed\n    end\n    if love.keyboard.isDown(\"d\") then\n        newX = player.x - math.sin(player.angle) * strafeSpeed\n        newY = player.y + math.cos(player.angle) * strafeSpeed\n    end\n\n    -- Rotation with left and right arrow keys\n    if love.keyboard.isDown(\"left\") then\n        player.angle = (player.angle - rotSpeed) % (2 * math.pi)\n    end\n    if love.keyboard.isDown(\"right\") then\n        player.angle = (player.angle + rotSpeed) % (2 * math.pi)\n    end\n\n    if not IsColliding(newX, player.y) then player.x = newX end\n    if not IsColliding(player.x, newY) then player.y = newY end\n\n    if love.keyboard.isDown(\"escape\") then\n        love.event.quit()\n    end\nend\n\nfunction DrawEnemies()\n    for _, enemy in ipairs(enemies) do\n        local dx = enemy.x - player.x\n        local dy = enemy.y - player.y\n        local distance = math.sqrt(dx * dx + dy * dy)\n\n        -- Ensure enemy is within view\n        if distance > 0.2 then\n            local enemyAngle = math.atan2(dy, dx) - player.angle\n            enemyAngle = (enemyAngle + math.pi) % (2 * math.pi) - math.pi\n\n            local stepX = dx / distance * 0.1\n            local stepY = dy / distance * 0.1\n            local checkX = player.x\n            local checkY = player.y\n            local isBlocked = false\n\n            for i = 1, math.floor(distance / 0.1) do\n                checkX = checkX + stepX\n                checkY = checkY + stepY\n                if IsColliding(checkX, checkY) then\n                    isBlocked = true\n                    break\n                end\n            end\n\n            -- Check if enemy is whin FOV\n            if not isBlocked and math.abs(enemyAngle) < player.fov / 2 then\n                local screenX = love.graphics.getWidth() / 2 + math.tan(enemyAngle) * 500 / distance\n                local enemySize = math.max(20, math.min(100, 500 / distance))\n\n                love.graphics.setColor(1, 0, 0, 1)\n                love.graphics.rectangle(\"fill\", screenX - enemySize / 2, (love.graphics.getHeight() / 2) - enemySize / 2,\n                    enemySize, enemySize)\n                love.graphics.setColor(1, 1, 1)\n            end\n        end\n    end\nend\n\nfunction love.draw()\n    local screenWidth  = love.graphics.getWidth()\n    local screenHeight = love.graphics.getHeight()\n    local columnWidth  = screenWidth / 120\n\n    -- Drawing the floor and ceiling(Dark gray for floor, light gray for ceiling)\n    print(love.timer.getFPS())\n    love.graphics.setColor(0.2, 0.2, 0.2) -- Floor(R-G-B)\n    love.graphics.rectangle(\"fill\", 0, screenHeight / 2 - player.pitch * screenHeight, screenWidth, screenHeight / 2)\n    love.graphics.setColor(0.1, 0.1, 0.1) -- Ceiling(R-G-B)\n    love.graphics.rectangle(\"fill\", 0, 0 - player.pitch * screenHeight, screenWidth, screenHeight / 2)\n\n\n    for i = 0, 119 do\n        local rayData = rayResults[i]\n        if rayData then\n            local distance, side, texX, rayAngle = unpack(rayData)\n\n            local correctedDistance              = distance *\n                math.cos(i * (player.fov / 120) - player.fov / 2) -- Fish eye fix\n            local projectionPlane                = (screenWidth / 2) / math.tan(player.fov / 2)\n            local wallHeight                     = (projectionPlane / (correctedDistance + 0.1))\n\n            local fog                            = math.max(0, 1 - (correctedDistance / 10))\n            local brightness                     = (side == 1) and 0.7 or 1.0\n            love.graphics.setColor(fog * brightness, fog * brightness, fog * brightness)\n\n            local quad = textures.quads[texX] or textures.quads[0]\n\n            love.graphics.draw(textures.wall, quad, i * columnWidth,\n                (screenHeight - wallHeight) / 2, 0, columnWidth, wallHeight / textures.wall:getHeight())\n        end\n    end\n    DrawEnemies()\nend\n\nfunction love.mousemoved(_, _, dx, _)\n    player.angle = (player.angle + dx * player.sensitivity) % (2 * math.pi)\nend\n",
								"range":
								{
									"end":
									{
										"character": 0,
										"line": 322
									},
									"start":
									{
										"character": 0,
										"line": 0
									}
								}
							}
						],
						"process_placeholders": false,
						"required_view_version": null
					},
					"",
					"AQAAAAAAAAABAAAAgxMAAAAAAACDEwAAAAAAAAAAAAAAAPC/"
				],
				[
					358,
					9,
					"left_delete",
					null,
					"CQAAAOklAAAAAAAA6SUAAAAAAAABAAAAIOglAAAAAAAA6CUAAAAAAAABAAAALOclAAAAAAAA5yUAAAAAAAABAAAAMOYlAAAAAAAA5iUAAAAAAAABAAAAIOUlAAAAAAAA5SUAAAAAAAABAAAALOQlAAAAAAAA5CUAAAAAAAABAAAAMOMlAAAAAAAA4yUAAAAAAAABAAAAIOIlAAAAAAAA4iUAAAAAAAABAAAALOElAAAAAAAA4SUAAAAAAAABAAAAMQ",
					"AQAAAAAAAAABAAAA6iUAAAAAAADqJQAAAAAAAAAAAAAAAPC/"
				],
				[
					359,
					1,
					"insert",
					{
						"characters": "enemy."
					},
					"BgAAAOElAAAAAAAA4iUAAAAAAAAAAAAA4iUAAAAAAADjJQAAAAAAAAAAAADjJQAAAAAAAOQlAAAAAAAAAAAAAOQlAAAAAAAA5SUAAAAAAAAAAAAA5SUAAAAAAADmJQAAAAAAAAAAAADmJQAAAAAAAOclAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA4SUAAAAAAADhJQAAAAAAAAAAAAAAAPC/"
				],
				[
					360,
					1,
					"insert",
					{
						"characters": "color[1"
					},
					"BwAAAOclAAAAAAAA6CUAAAAAAAAAAAAA6CUAAAAAAADpJQAAAAAAAAAAAADpJQAAAAAAAOolAAAAAAAAAAAAAOolAAAAAAAA6yUAAAAAAAAAAAAA6yUAAAAAAADsJQAAAAAAAAAAAADsJQAAAAAAAO0lAAAAAAAAAAAAAO0lAAAAAAAA7iUAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA5yUAAAAAAADnJQAAAAAAAAAAAAAAAPC/"
				],
				[
					363,
					1,
					"insert",
					{
						"characters": "],"
					},
					"AgAAAO4lAAAAAAAA7yUAAAAAAAAAAAAA7yUAAAAAAADwJQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA7iUAAAAAAADuJQAAAAAAAAAAAAAAAPC/"
				],
				[
					364,
					1,
					"insert",
					{
						"characters": "  "
					},
					"AgAAAPAlAAAAAAAA8SUAAAAAAAAAAAAA8SUAAAAAAADyJQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA8CUAAAAAAADwJQAAAAAAAAAAAAAAAPC/"
				],
				[
					366,
					1,
					"insert",
					{
						"characters": "enemy.color"
					},
					"CwAAAPElAAAAAAAA8iUAAAAAAAAAAAAA8iUAAAAAAADzJQAAAAAAAAAAAADzJQAAAAAAAPQlAAAAAAAAAAAAAPQlAAAAAAAA9SUAAAAAAAAAAAAA9SUAAAAAAAD2JQAAAAAAAAAAAAD2JQAAAAAAAPclAAAAAAAAAAAAAPclAAAAAAAA+CUAAAAAAAAAAAAA+CUAAAAAAAD5JQAAAAAAAAAAAAD5JQAAAAAAAPolAAAAAAAAAAAAAPolAAAAAAAA+yUAAAAAAAAAAAAA+yUAAAAAAAD8JQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA8SUAAAAAAADxJQAAAAAAAAAAAAAAAPC/"
				],
				[
					367,
					1,
					"insert_snippet",
					{
						"contents": "[$0]"
					},
					"AQAAAPwlAAAAAAAA/iUAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA/CUAAAAAAAD8JQAAAAAAAAAAAAAAAPC/"
				],
				[
					368,
					1,
					"insert",
					{
						"characters": "2"
					},
					"AQAAAP0lAAAAAAAA/iUAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA/SUAAAAAAAD9JQAAAAAAAAAAAAAAAPC/"
				],
				[
					370,
					1,
					"insert",
					{
						"characters": ","
					},
					"AQAAAP8lAAAAAAAAACYAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA/yUAAAAAAAD/JQAAAAAAAAAAAAAAAPC/"
				],
				[
					371,
					1,
					"insert",
					{
						"characters": " enemy.x"
					},
					"CAAAAAAmAAAAAAAAASYAAAAAAAAAAAAAASYAAAAAAAACJgAAAAAAAAAAAAACJgAAAAAAAAMmAAAAAAAAAAAAAAMmAAAAAAAABCYAAAAAAAAAAAAABCYAAAAAAAAFJgAAAAAAAAAAAAAFJgAAAAAAAAYmAAAAAAAAAAAAAAYmAAAAAAAAByYAAAAAAAAAAAAAByYAAAAAAAAIJgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAACYAAAAAAAAAJgAAAAAAAAAAAAAAAPC/"
				],
				[
					372,
					1,
					"left_delete",
					null,
					"AQAAAAcmAAAAAAAAByYAAAAAAAABAAAAeA",
					"AQAAAAAAAAABAAAACCYAAAAAAAAIJgAAAAAAAAAAAAAAAPC/"
				],
				[
					373,
					1,
					"insert",
					{
						"characters": "color"
					},
					"BQAAAAcmAAAAAAAACCYAAAAAAAAAAAAACCYAAAAAAAAJJgAAAAAAAAAAAAAJJgAAAAAAAAomAAAAAAAAAAAAAAomAAAAAAAACyYAAAAAAAAAAAAACyYAAAAAAAAMJgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAByYAAAAAAAAHJgAAAAAAAAAAAAAAAPC/"
				],
				[
					374,
					1,
					"insert_snippet",
					{
						"contents": "[$0]"
					},
					"AQAAAAwmAAAAAAAADiYAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAADCYAAAAAAAAMJgAAAAAAAAAAAAAAAPC/"
				],
				[
					375,
					1,
					"insert",
					{
						"characters": "3"
					},
					"AQAAAA0mAAAAAAAADiYAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAADSYAAAAAAAANJgAAAAAAAAAAAAAAAPC/"
				],
				[
					377,
					1,
					"insert",
					{
						"characters": ","
					},
					"AQAAAA8mAAAAAAAAECYAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAADyYAAAAAAAAPJgAAAAAAAAAAAAAAAPC/"
				],
				[
					382,
					1,
					"insert",
					{
						"characters": " enemy.c"
					},
					"CAAAABAmAAAAAAAAESYAAAAAAAAAAAAAESYAAAAAAAASJgAAAAAAAAAAAAASJgAAAAAAABMmAAAAAAAAAAAAABMmAAAAAAAAFCYAAAAAAAAAAAAAFCYAAAAAAAAVJgAAAAAAAAAAAAAVJgAAAAAAABYmAAAAAAAAAAAAABYmAAAAAAAAFyYAAAAAAAAAAAAAFyYAAAAAAAAYJgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAECYAAAAAAAAQJgAAAAAAAAAAAAAAAPC/"
				],
				[
					383,
					1,
					"insert",
					{
						"characters": "olor"
					},
					"BAAAABgmAAAAAAAAGSYAAAAAAAAAAAAAGSYAAAAAAAAaJgAAAAAAAAAAAAAaJgAAAAAAABsmAAAAAAAAAAAAABsmAAAAAAAAHCYAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAGCYAAAAAAAAYJgAAAAAAAAAAAAAAAPC/"
				],
				[
					384,
					1,
					"insert_snippet",
					{
						"contents": "[$0]"
					},
					"AQAAABwmAAAAAAAAHiYAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAHCYAAAAAAAAcJgAAAAAAAAAAAAAAAPC/"
				],
				[
					385,
					1,
					"insert",
					{
						"characters": "4"
					},
					"AQAAAB0mAAAAAAAAHiYAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAHSYAAAAAAAAdJgAAAAAAAAAAAAAAAPC/"
				],
				[
					387,
					1,
					"insert",
					{
						"characters": ","
					},
					"AQAAAB8mAAAAAAAAICYAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAHyYAAAAAAAAfJgAAAAAAAAAAAAAAAPC/"
				],
				[
					393,
					1,
					"insert",
					{
						"characters": "\n\t"
					},
					"BQAAAAEmAAAAAAAAAiYAAAAAAAAAAAAAAiYAAAAAAAASJgAAAAAAAAAAAAACJgAAAAAAAAImAAAAAAAAEAAAACAgICAgICAgICAgICAgICACJgAAAAAAABYmAAAAAAAAAAAAABYmAAAAAAAAGiYAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAASYAAAAAAAABJgAAAAAAAAAAAAAAAPC/"
				],
				[
					394,
					1,
					"insert",
					{
						"characters": "\t\t\t\t"
					},
					"BAAAABomAAAAAAAAHiYAAAAAAAAAAAAAHiYAAAAAAAAiJgAAAAAAAAAAAAAiJgAAAAAAACYmAAAAAAAAAAAAACYmAAAAAAAAKiYAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAGiYAAAAAAAAaJgAAAAAAAAAAAAAAAPC/"
				],
				[
					395,
					1,
					"left_delete",
					null,
					"AQAAACYmAAAAAAAAJiYAAAAAAAAEAAAAICAgIA",
					"AQAAAAAAAAABAAAAKiYAAAAAAAAqJgAAAAAAAAAAAAAAAPC/"
				],
				[
					396,
					1,
					"insert",
					{
						"characters": "   "
					},
					"AwAAACYmAAAAAAAAJyYAAAAAAAAAAAAAJyYAAAAAAAAoJgAAAAAAAAAAAAAoJgAAAAAAACkmAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAJiYAAAAAAAAmJgAAAAAAAAAAAAAAAPC/"
				],
				[
					399,
					1,
					"insert",
					{
						"characters": " enemy."
					},
					"BwAAAEgmAAAAAAAASSYAAAAAAAAAAAAASSYAAAAAAABKJgAAAAAAAAAAAABKJgAAAAAAAEsmAAAAAAAAAAAAAEsmAAAAAAAATCYAAAAAAAAAAAAATCYAAAAAAABNJgAAAAAAAAAAAABNJgAAAAAAAE4mAAAAAAAAAAAAAE4mAAAAAAAATyYAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAASCYAAAAAAABIJgAAAAAAAAAAAAAAAPC/"
				],
				[
					400,
					1,
					"insert",
					{
						"characters": "color"
					},
					"BQAAAE8mAAAAAAAAUCYAAAAAAAAAAAAAUCYAAAAAAABRJgAAAAAAAAAAAABRJgAAAAAAAFImAAAAAAAAAAAAAFImAAAAAAAAUyYAAAAAAAAAAAAAUyYAAAAAAABUJgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAATyYAAAAAAABPJgAAAAAAAAAAAAAAAPC/"
				],
				[
					401,
					1,
					"insert_snippet",
					{
						"contents": "[$0]"
					},
					"AQAAAFQmAAAAAAAAViYAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAVCYAAAAAAABUJgAAAAAAAAAAAAAAAPC/"
				],
				[
					402,
					1,
					"insert",
					{
						"characters": "5"
					},
					"AQAAAFUmAAAAAAAAViYAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAVSYAAAAAAABVJgAAAAAAAAAAAAAAAPC/"
				],
				[
					404,
					1,
					"insert",
					{
						"characters": ","
					},
					"AQAAAFcmAAAAAAAAWCYAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAVyYAAAAAAABXJgAAAAAAAAAAAAAAAPC/"
				],
				[
					411,
					3,
					"left_delete",
					null,
					"AwAAAFkmAAAAAAAAWSYAAAAAAAABAAAAMVgmAAAAAAAAWCYAAAAAAAABAAAAIFcmAAAAAAAAVyYAAAAAAAABAAAALA",
					"AQAAAAAAAAABAAAAWiYAAAAAAABaJgAAAAAAAAAAAAAAAPC/"
				],
				[
					416,
					14,
					"left_delete",
					null,
					"DgAAAFYmAAAAAAAAViYAAAAAAAABAAAAXVUmAAAAAAAAVSYAAAAAAAABAAAANVQmAAAAAAAAVCYAAAAAAAABAAAAW1MmAAAAAAAAUyYAAAAAAAABAAAAclImAAAAAAAAUiYAAAAAAAABAAAAb1EmAAAAAAAAUSYAAAAAAAABAAAAbFAmAAAAAAAAUCYAAAAAAAABAAAAb08mAAAAAAAATyYAAAAAAAABAAAAY04mAAAAAAAATiYAAAAAAAABAAAALk0mAAAAAAAATSYAAAAAAAABAAAAeUwmAAAAAAAATCYAAAAAAAABAAAAbUsmAAAAAAAASyYAAAAAAAABAAAAZUomAAAAAAAASiYAAAAAAAABAAAAbkkmAAAAAAAASSYAAAAAAAABAAAAZQ",
					"AQAAAAAAAAABAAAAVyYAAAAAAABXJgAAAAAAAAAAAAAAAPC/"
				],
				[
					417,
					1,
					"insert",
					{
						"characters": "1"
					},
					"AQAAAEkmAAAAAAAASiYAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAASSYAAAAAAABJJgAAAAAAAAAAAAAAAPC/"
				],
				[
					425,
					1,
					"insert",
					{
						"characters": "enemy.color"
					},
					"CwAAAEkmAAAAAAAASiYAAAAAAAAAAAAASiYAAAAAAABLJgAAAAAAAAAAAABLJgAAAAAAAEwmAAAAAAAAAAAAAEwmAAAAAAAATSYAAAAAAAAAAAAATSYAAAAAAABOJgAAAAAAAAAAAABOJgAAAAAAAE8mAAAAAAAAAAAAAE8mAAAAAAAAUCYAAAAAAAAAAAAAUCYAAAAAAABRJgAAAAAAAAAAAABRJgAAAAAAAFImAAAAAAAAAAAAAFImAAAAAAAAUyYAAAAAAAAAAAAAUyYAAAAAAABUJgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAASSYAAAAAAABJJgAAAAAAAAAAAAAAAPC/"
				],
				[
					426,
					1,
					"insert",
					{
						"characters": "[5"
					},
					"AgAAAFQmAAAAAAAAVSYAAAAAAAAAAAAAVSYAAAAAAABWJgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAVCYAAAAAAABUJgAAAAAAAAAAAAAAAPC/"
				],
				[
					429,
					1,
					"insert",
					{
						"characters": "],"
					},
					"AgAAAFYmAAAAAAAAVyYAAAAAAAAAAAAAVyYAAAAAAABYJgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAViYAAAAAAABWJgAAAAAAAAAAAAAAAPC/"
				],
				[
					449,
					17,
					"left_delete",
					null,
					"EQAAAFcmAAAAAAAAVyYAAAAAAAABAAAALFYmAAAAAAAAViYAAAAAAAABAAAAXVUmAAAAAAAAVSYAAAAAAAABAAAANVQmAAAAAAAAVCYAAAAAAAABAAAAW1MmAAAAAAAAUyYAAAAAAAABAAAAclImAAAAAAAAUiYAAAAAAAABAAAAb1EmAAAAAAAAUSYAAAAAAAABAAAAbFAmAAAAAAAAUCYAAAAAAAABAAAAb08mAAAAAAAATyYAAAAAAAABAAAAY04mAAAAAAAATiYAAAAAAAABAAAALk0mAAAAAAAATSYAAAAAAAABAAAAeUwmAAAAAAAATCYAAAAAAAABAAAAbUsmAAAAAAAASyYAAAAAAAABAAAAZUomAAAAAAAASiYAAAAAAAABAAAAbkkmAAAAAAAASSYAAAAAAAABAAAAZUgmAAAAAAAASCYAAAAAAAABAAAAIEcmAAAAAAAARyYAAAAAAAABAAAALA",
					"AQAAAAAAAAABAAAAWCYAAAAAAABYJgAAAAAAAAAAAAAAAPC/"
				],
				[
					450,
					14,
					"left_delete",
					null,
					"DgAAAEYmAAAAAAAARiYAAAAAAAABAAAAXUUmAAAAAAAARSYAAAAAAAABAAAANEQmAAAAAAAARCYAAAAAAAABAAAAW0MmAAAAAAAAQyYAAAAAAAABAAAAckImAAAAAAAAQiYAAAAAAAABAAAAb0EmAAAAAAAAQSYAAAAAAAABAAAAbEAmAAAAAAAAQCYAAAAAAAABAAAAbz8mAAAAAAAAPyYAAAAAAAABAAAAYz4mAAAAAAAAPiYAAAAAAAABAAAALj0mAAAAAAAAPSYAAAAAAAABAAAAeTwmAAAAAAAAPCYAAAAAAAABAAAAbTsmAAAAAAAAOyYAAAAAAAABAAAAZTomAAAAAAAAOiYAAAAAAAABAAAAbjkmAAAAAAAAOSYAAAAAAAABAAAAZQ",
					"AQAAAAAAAAABAAAARyYAAAAAAABHJgAAAAAAAAAAAAAAAPC/"
				],
				[
					456,
					1,
					"lsp_apply_document_edit",
					{
						"changes":
						[
							{
								"newText": "--[[\n    =======================================================\n     -- RayCasting implementation done with Love2D\n     -- Author: Mikey\n     -- Date: 2/8/2025\n    =======================================================\n]]\n--\nlove.graphics.setDefaultFilter(\"nearest\", \"nearest\")\nlove.mouse.setRelativeMode(true)\n\n\nlocal player = {\n    x = 4,\n    y = 4,\n    angle = 0,\n    pitch = 0,\n    fov = math.pi / 3,\n    speed = 3,\n    sensitivity = 0.002,\n}\n\nlocal enemies = {\n    { x = 15, y = 9,  speed = 1.5, direction = 1, color = { 1, 0, 0 } }, -- Red\n    { x = 3,  y = 12, speed = 1.3, direction = 1, color = { 0, 1, 0 } }, -- Green\n    { x = 8,  y = 6,  speed = 1.7, direction = 1, color = { 0, 0, 1 } }, -- Blue\n    { x = 12, y = 3,  speed = 1.2, direction = 1, color = { 1, 1, 0 } }, -- Yellow\n    { x = 6,  y = 3,  speed = 1.4, direction = 1, color = { 1, 0, 1 } }  -- Purple\n}\n\nlocal map = {\n    width = 16,\n    height = 16,\n    data = {\n        1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n        1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1,\n        1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1,\n        1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1,\n        1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1,\n        1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1,\n        1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1,\n        1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1,\n        1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1,\n        1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1,\n        1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1,\n        1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1,\n        1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1,\n        1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1,\n        1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1\n    }\n}\n\nlocal textures = {\n    wall = love.graphics.newImage(\"res/mossy.png\"),\n    quads = {}\n}\ntextures.wall:setFilter(\"nearest\", \"nearest\")\n\nfor i = 0, textures.wall:getWidth() - 1 do\n    textures.quads[i] = love.graphics.newQuad(i, 0, 1, textures.wall:getHeight(), textures.wall:getDimensions())\nend\n\n\nfunction IsColliding(x, y)\n    local buffer = 0.2\n    local tileX = math.floor(x)\n    local tileY = math.floor(y)\n\n    if tileX < 1 or tileX > map.width or tileY < 1 or tileY > map.height then\n        return true\n    end\n\n    return map.data[tileY * map.width + tileX + 1] == 1 or\n        map.data[tileY * map.width + math.floor(x - buffer) + 1] == 1 or\n        map.data[tileY * map.width + math.floor(x + buffer) + 1] == 1 or\n        map.data[math.floor(y - buffer) * map.width + tileX + 1] == 1 or\n        map.data[math.floor(y + buffer) * map.width + tileX + 1] == 1\nend\n\nfunction IsPlayerColliding(x, y)\n    local buffer = 0.3\n    return math.abs(x - player.x) < buffer and math.abs(y - player.y) < buffer\nend\n\nfunction map:get(x, y)\n    if x < 1 or x > self.width or y < 1 or y > self.height then\n        return 1\n    end\n    local index = math.floor(y) * self.width + math.floor(x) + 1\n    return self.data[index] or 1\nend\n\nlocal rayResults = {}\n\nfunction PreComputeRays()\n    for i = 0, 119 do\n        local rayAngle             = player.angle - (player.fov / 2) + ((i / 119) * player.fov)\n        local distance, side, texX = CastRay(rayAngle)\n        rayResults[i]              = { distance, side, texX, rayAngle }\n    end\nend\n\n-- Raycasting optimized with DDA to better calculate distance and\nfunction CastRay(angle)\n    local sinA                = math.sin(angle)\n    local cosA                = math.cos(angle)\n    local mapX, mapY          = math.floor(player.x), math.floor(player.y)\n    local deltaDistX          = math.abs(1 / cosA)\n    local deltaDistY          = math.abs(1 / sinA)\n\n    local stepX               = (cosA < 0) and -1 or 1\n    local stepY               = (sinA < 0) and -1 or 1\n    local sideDistX           = (cosA < 0) and (player.x - mapX) * deltaDistX or (mapX + 1 - player.x) * deltaDistX\n    local sideDistY           = (sinA < 0) and (player.y - mapY) * deltaDistY or (mapY + 1 - player.y) * deltaDistY\n\n    local hit, side, distance = false, 0, 0\n    while not hit and distance < 16 do\n        if sideDistX < sideDistY then\n            sideDistX = sideDistX + deltaDistX\n            mapX = mapX + stepX\n            side = 0\n        else\n            sideDistY = sideDistY + deltaDistY\n            mapY = mapY + stepY\n            side = 1\n        end\n        if map:get(mapX, mapY) == 1 then\n            hit = true\n            distance = (side == 0) and (sideDistX - deltaDistX) or (sideDistY - deltaDistY)\n        end\n    end\n\n    local wallHit\n    if side == 0 then\n        wallHit = player.y + distance * sinA\n    else\n        wallHit = player.x + distance * cosA\n    end\n    wallHit = wallHit - math.floor(wallHit) -- Get fractional part\n    local texX = math.floor(wallHit * textures.wall:getWidth() + 0.5) % textures.wall:getWidth()\n    --texX = math.max(0, math.min(textures.wall:getWidth() - 1, texX))\n\n    return distance, side, texX -- Texture X coordinate\nend\n\nfunction UpdateEnemies(dt)\n    for _, enemy in ipairs(enemies) do\n        local dx       = player.x - enemy.x\n        local dy       = player.y - enemy.y\n        local distance = math.sqrt(dx ^ 2 + dy ^ 2)\n\n        if IsPlayerColliding(enemy.x, enemy.y) then\n            print(\"ENEMY COLLIDED WITH PLAYER\")\n            return\n        end\n\n        -- Move towards player if not too close\n        if distance > 0.3 then\n            local approachSpeed = math.min(enemy.speed, distance * 1.5) -- Slows down near player\n            local moveX         = (dx / distance) * approachSpeed * dt\n            local moveY         = (dy / distance) * approachSpeed * dt\n\n            local futureX       = enemy.x + moveX\n            local futureY       = enemy.y + moveY\n\n            local canMoveX      = not IsColliding(futureX, enemy.y) and not IsPlayerColliding(futureX, enemy.y)\n            local canMoveY      = not IsColliding(enemy.x, futureY) and not IsPlayerColliding(enemy.x, futureY)\n\n            if canMoveX then\n                enemy.x = futureX\n            end\n            if canMoveY then\n                enemy.y = futureY\n            end\n\n            if not canMoveX and not canMoveY then\n                print(\"ENEMY STUCK: TRYING TO SLIDE\")\n\n                if math.abs(dx) > math.abs(dy) then\n                    if not IsColliding(enemy.x, enemy.y + 0.3) then\n                        enemy.y = enemy.y + 0.3\n                    elseif not IsColliding(enemy.x, enemy.y - 0.3) then\n                        enemy.y = enemy.y - 0.3\n                    end\n                else\n                    if not IsColliding(enemy.x + 0.3, enemy.y) then\n                        enemy.x = enemy.x + 0.3\n                    elseif not IsColliding(enemy.x - 0.3, enemy.y) then\n                        enemy.x = enemy.x - 0.3\n                    end\n                end\n            end\n        end\n    end\nend\n\nfunction love.update(dt)\n    PreComputeRays()\n    UpdateEnemies(dt)\n\n    local isRunning   = love.keyboard.isDown(\"lshift\") or love.keyboard.isDown(\"rshift\")\n    local moveSpeed   = (isRunning and 4 or 2) * dt -- Sprinting speed\n    local strafeSpeed = moveSpeed * 0.7             -- Modify as needed\n    local rotSpeed    = 1.6 * dt\n\n    local newX        = player.x\n    local newY        = player.y\n\n\n    if love.keyboard.isDown(\"w\") then\n        newX = player.x + math.cos(player.angle) * moveSpeed\n        newY = player.y + math.sin(player.angle) * moveSpeed\n    end\n    if love.keyboard.isDown(\"s\") then\n        newX = player.x - math.cos(player.angle) * moveSpeed\n        newY = player.y - math.sin(player.angle) * moveSpeed\n    end\n    if love.keyboard.isDown(\"a\") then\n        newX = player.x + math.sin(player.angle) * strafeSpeed\n        newY = player.y - math.cos(player.angle) * strafeSpeed\n    end\n    if love.keyboard.isDown(\"d\") then\n        newX = player.x - math.sin(player.angle) * strafeSpeed\n        newY = player.y + math.cos(player.angle) * strafeSpeed\n    end\n\n    -- Rotation with left and right arrow keys\n    if love.keyboard.isDown(\"left\") then\n        player.angle = (player.angle - rotSpeed) % (2 * math.pi)\n    end\n    if love.keyboard.isDown(\"right\") then\n        player.angle = (player.angle + rotSpeed) % (2 * math.pi)\n    end\n\n    if not IsColliding(newX, player.y) then player.x = newX end\n    if not IsColliding(player.x, newY) then player.y = newY end\n\n    if love.keyboard.isDown(\"escape\") then\n        love.event.quit()\n    end\nend\n\nfunction DrawEnemies()\n    for _, enemy in ipairs(enemies) do\n        local dx = enemy.x - player.x\n        local dy = enemy.y - player.y\n        local distance = math.sqrt(dx * dx + dy * dy)\n\n        -- Ensure enemy is within view\n        if distance > 0.2 then\n            local enemyAngle = math.atan2(dy, dx) - player.angle\n            enemyAngle = (enemyAngle + math.pi) % (2 * math.pi) - math.pi\n\n            local stepX = dx / distance * 0.1\n            local stepY = dy / distance * 0.1\n            local checkX = player.x\n            local checkY = player.y\n            local isBlocked = false\n\n            for i = 1, math.floor(distance / 0.1) do\n                checkX = checkX + stepX\n                checkY = checkY + stepY\n                if IsColliding(checkX, checkY) then\n                    isBlocked = true\n                    break\n                end\n            end\n\n            -- Check if enemy is whin FOV\n            if not isBlocked and math.abs(enemyAngle) < player.fov / 2 then\n                local screenX = love.graphics.getWidth() / 2 + math.tan(enemyAngle) * 500 / distance\n                local enemySize = math.max(20, math.min(100, 500 / distance))\n\n                love.graphics.setColor(enemy.color[1], enemy.color[2],\n                    enemy.color[3], 1)\n                love.graphics.rectangle(\"fill\", screenX - enemySize / 2, (love.graphics.getHeight() / 2) - enemySize / 2,\n                    enemySize, enemySize)\n                love.graphics.setColor(1, 1, 1)\n            end\n        end\n    end\nend\n\nfunction love.draw()\n    local screenWidth  = love.graphics.getWidth()\n    local screenHeight = love.graphics.getHeight()\n    local columnWidth  = screenWidth / 120\n\n    -- Drawing the floor and ceiling(Dark gray for floor, light gray for ceiling)\n    print(love.timer.getFPS())\n    love.graphics.setColor(0.2, 0.2, 0.2) -- Floor(R-G-B)\n    love.graphics.rectangle(\"fill\", 0, screenHeight / 2 - player.pitch * screenHeight, screenWidth, screenHeight / 2)\n    love.graphics.setColor(0.1, 0.1, 0.1) -- Ceiling(R-G-B)\n    love.graphics.rectangle(\"fill\", 0, 0 - player.pitch * screenHeight, screenWidth, screenHeight / 2)\n\n\n    for i = 0, 119 do\n        local rayData = rayResults[i]\n        if rayData then\n            local distance, side, texX, rayAngle = unpack(rayData)\n\n            local correctedDistance              = distance *\n                math.cos(i * (player.fov / 120) - player.fov / 2) -- Fish eye fix\n            local projectionPlane                = (screenWidth / 2) / math.tan(player.fov / 2)\n            local wallHeight                     = (projectionPlane / (correctedDistance + 0.1))\n\n            local fog                            = math.max(0, 1 - (correctedDistance / 10))\n            local brightness                     = (side == 1) and 0.7 or 1.0\n            love.graphics.setColor(fog * brightness, fog * brightness, fog * brightness)\n\n            local quad = textures.quads[texX] or textures.quads[0]\n\n            love.graphics.draw(textures.wall, quad, i * columnWidth,\n                (screenHeight - wallHeight) / 2, 0, columnWidth, wallHeight / textures.wall:getHeight())\n        end\n    end\n    DrawEnemies()\nend\n\nfunction love.mousemoved(_, _, dx, _)\n    player.angle = (player.angle + dx * player.sensitivity) % (2 * math.pi)\nend\n",
								"range":
								{
									"end":
									{
										"character": 0,
										"line": 322
									},
									"start":
									{
										"character": 0,
										"line": 0
									}
								}
							}
						],
						"process_placeholders": false,
						"required_view_version": null
					},
					"",
					"AQAAAAAAAAABAAAAASYAAAAAAAABJgAAAAAAAAAAAAAAAPC/"
				],
				[
					465,
					1,
					"insert",
					{
						"characters": ","
					},
					"AQAAAGEDAAAAAAAAYgMAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAYQMAAAAAAABhAwAAAAAAAAAAAAAAAPC/"
				],
				[
					483,
					1,
					"lsp_apply_document_edit",
					{
						"changes":
						[
							{
								"newText": "--[[\n    =======================================================\n     -- RayCasting implementation done with Love2D\n     -- Author: Mikey\n     -- Date: 2/8/2025\n    =======================================================\n]]\n--\nlove.graphics.setDefaultFilter(\"nearest\", \"nearest\")\nlove.mouse.setRelativeMode(true)\n\n\nlocal player = {\n    x = 4,\n    y = 4,\n    angle = 0,\n    pitch = 0,\n    fov = math.pi / 3,\n    speed = 3,\n    sensitivity = 0.002,\n}\n\nlocal enemies = {\n    { x = 15, y = 9,  speed = 1.5, direction = 1, color = { 1, 0, 0 } }, -- Red\n    { x = 3,  y = 12, speed = 1.3, direction = 1, color = { 0, 1, 0 } }, -- Green\n    { x = 8,  y = 6,  speed = 1.7, direction = 1, color = { 0, 0, 1 } }, -- Blue\n    { x = 12, y = 3,  speed = 1.2, direction = 1, color = { 1, 1, 0 } }, -- Yellow\n    { x = 6,  y = 3,  speed = 1.4, direction = 1, color = { 1, 0, 1 } }, -- Purple\n}\n\nlocal map = {\n    width = 16,\n    height = 16,\n    data = {\n        1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n        1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1,\n        1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1,\n        1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1,\n        1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1,\n        1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1,\n        1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1,\n        1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1,\n        1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1,\n        1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1,\n        1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1,\n        1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1,\n        1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1,\n        1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1,\n        1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1\n    }\n}\n\nlocal textures = {\n    wall = love.graphics.newImage(\"res/mossy.png\"),\n    quads = {}\n}\ntextures.wall:setFilter(\"nearest\", \"nearest\")\n\nfor i = 0, textures.wall:getWidth() - 1 do\n    textures.quads[i] = love.graphics.newQuad(i, 0, 1, textures.wall:getHeight(), textures.wall:getDimensions())\nend\n\n\nfunction IsColliding(x, y)\n    local buffer = 0.2\n    local tileX = math.floor(x)\n    local tileY = math.floor(y)\n\n    if tileX < 1 or tileX > map.width or tileY < 1 or tileY > map.height then\n        return true\n    end\n\n    return map.data[tileY * map.width + tileX + 1] == 1 or\n        map.data[tileY * map.width + math.floor(x - buffer) + 1] == 1 or\n        map.data[tileY * map.width + math.floor(x + buffer) + 1] == 1 or\n        map.data[math.floor(y - buffer) * map.width + tileX + 1] == 1 or\n        map.data[math.floor(y + buffer) * map.width + tileX + 1] == 1\nend\n\nfunction IsPlayerColliding(x, y)\n    local buffer = 0.3\n    return math.abs(x - player.x) < buffer and math.abs(y - player.y) < buffer\nend\n\nfunction map:get(x, y)\n    if x < 1 or x > self.width or y < 1 or y > self.height then\n        return 1\n    end\n    local index = math.floor(y) * self.width + math.floor(x) + 1\n    return self.data[index] or 1\nend\n\nlocal rayResults = {}\n\nfunction PreComputeRays()\n    for i = 0, 119 do\n        local rayAngle             = player.angle - (player.fov / 2) + ((i / 119) * player.fov)\n        local distance, side, texX = CastRay(rayAngle)\n        rayResults[i]              = { distance, side, texX, rayAngle }\n    end\nend\n\n-- Raycasting optimized with DDA to better calculate distance and\nfunction CastRay(angle)\n    local sinA                = math.sin(angle)\n    local cosA                = math.cos(angle)\n    local mapX, mapY          = math.floor(player.x), math.floor(player.y)\n    local deltaDistX          = math.abs(1 / cosA)\n    local deltaDistY          = math.abs(1 / sinA)\n\n    local stepX               = (cosA < 0) and -1 or 1\n    local stepY               = (sinA < 0) and -1 or 1\n    local sideDistX           = (cosA < 0) and (player.x - mapX) * deltaDistX or (mapX + 1 - player.x) * deltaDistX\n    local sideDistY           = (sinA < 0) and (player.y - mapY) * deltaDistY or (mapY + 1 - player.y) * deltaDistY\n\n    local hit, side, distance = false, 0, 0\n    while not hit and distance < 16 do\n        if sideDistX < sideDistY then\n            sideDistX = sideDistX + deltaDistX\n            mapX = mapX + stepX\n            side = 0\n        else\n            sideDistY = sideDistY + deltaDistY\n            mapY = mapY + stepY\n            side = 1\n        end\n        if map:get(mapX, mapY) == 1 then\n            hit = true\n            distance = (side == 0) and (sideDistX - deltaDistX) or (sideDistY - deltaDistY)\n        end\n    end\n\n    local wallHit\n    if side == 0 then\n        wallHit = player.y + distance * sinA\n    else\n        wallHit = player.x + distance * cosA\n    end\n    wallHit = wallHit - math.floor(wallHit) -- Get fractional part\n    local texX = math.floor(wallHit * textures.wall:getWidth() + 0.5) % textures.wall:getWidth()\n    --texX = math.max(0, math.min(textures.wall:getWidth() - 1, texX))\n\n    return distance, side, texX -- Texture X coordinate\nend\n\nfunction UpdateEnemies(dt)\n    for _, enemy in ipairs(enemies) do\n        local dx       = player.x - enemy.x\n        local dy       = player.y - enemy.y\n        local distance = math.sqrt(dx ^ 2 + dy ^ 2)\n\n        if IsPlayerColliding(enemy.x, enemy.y) then\n            print(\"ENEMY COLLIDED WITH PLAYER\")\n            return\n        end\n\n        -- Move towards player if not too close\n        if distance > 0.3 then\n            local approachSpeed = math.min(enemy.speed, distance * 1.5) -- Slows down near player\n            local moveX         = (dx / distance) * approachSpeed * dt\n            local moveY         = (dy / distance) * approachSpeed * dt\n\n            local futureX       = enemy.x + moveX\n            local futureY       = enemy.y + moveY\n\n            local canMoveX      = not IsColliding(futureX, enemy.y) and not IsPlayerColliding(futureX, enemy.y)\n            local canMoveY      = not IsColliding(enemy.x, futureY) and not IsPlayerColliding(enemy.x, futureY)\n\n            if canMoveX then\n                enemy.x = futureX\n            end\n            if canMoveY then\n                enemy.y = futureY\n            end\n\n            if not canMoveX and not canMoveY then\n                print(\"ENEMY STUCK: TRYING TO SLIDE\")\n\n                if math.abs(dx) > math.abs(dy) then\n                    if not IsColliding(enemy.x, enemy.y + 0.3) then\n                        enemy.y = enemy.y + 0.3\n                    elseif not IsColliding(enemy.x, enemy.y - 0.3) then\n                        enemy.y = enemy.y - 0.3\n                    end\n                else\n                    if not IsColliding(enemy.x + 0.3, enemy.y) then\n                        enemy.x = enemy.x + 0.3\n                    elseif not IsColliding(enemy.x - 0.3, enemy.y) then\n                        enemy.x = enemy.x - 0.3\n                    end\n                end\n            end\n        end\n    end\nend\n\nfunction love.update(dt)\n    PreComputeRays()\n    UpdateEnemies(dt)\n\n    local isRunning   = love.keyboard.isDown(\"lshift\") or love.keyboard.isDown(\"rshift\")\n    local moveSpeed   = (isRunning and 4 or 2) * dt -- Sprinting speed\n    local strafeSpeed = moveSpeed * 0.7             -- Modify as needed\n    local rotSpeed    = 1.6 * dt\n\n    local newX        = player.x\n    local newY        = player.y\n\n\n    if love.keyboard.isDown(\"w\") then\n        newX = player.x + math.cos(player.angle) * moveSpeed\n        newY = player.y + math.sin(player.angle) * moveSpeed\n    end\n    if love.keyboard.isDown(\"s\") then\n        newX = player.x - math.cos(player.angle) * moveSpeed\n        newY = player.y - math.sin(player.angle) * moveSpeed\n    end\n    if love.keyboard.isDown(\"a\") then\n        newX = player.x + math.sin(player.angle) * strafeSpeed\n        newY = player.y - math.cos(player.angle) * strafeSpeed\n    end\n    if love.keyboard.isDown(\"d\") then\n        newX = player.x - math.sin(player.angle) * strafeSpeed\n        newY = player.y + math.cos(player.angle) * strafeSpeed\n    end\n\n    -- Rotation with left and right arrow keys\n    if love.keyboard.isDown(\"left\") then\n        player.angle = (player.angle - rotSpeed) % (2 * math.pi)\n    end\n    if love.keyboard.isDown(\"right\") then\n        player.angle = (player.angle + rotSpeed) % (2 * math.pi)\n    end\n\n    if not IsColliding(newX, player.y) then player.x = newX end\n    if not IsColliding(player.x, newY) then player.y = newY end\n\n    if love.keyboard.isDown(\"escape\") then\n        love.event.quit()\n    end\nend\n\nfunction DrawEnemies()\n    for _, enemy in ipairs(enemies) do\n        local dx = enemy.x - player.x\n        local dy = enemy.y - player.y\n        local distance = math.sqrt(dx * dx + dy * dy)\n\n        -- Ensure enemy is within view\n        if distance > 0.2 then\n            local enemyAngle = math.atan2(dy, dx) - player.angle\n            enemyAngle = (enemyAngle + math.pi) % (2 * math.pi) - math.pi\n\n            local stepX = dx / distance * 0.1\n            local stepY = dy / distance * 0.1\n            local checkX = player.x\n            local checkY = player.y\n            local isBlocked = false\n\n            for i = 1, math.floor(distance / 0.1) do\n                checkX = checkX + stepX\n                checkY = checkY + stepY\n                if IsColliding(checkX, checkY) then\n                    isBlocked = true\n                    break\n                end\n            end\n\n            -- Check if enemy is whin FOV\n            if not isBlocked and math.abs(enemyAngle) < player.fov / 2 then\n                local screenX = love.graphics.getWidth() / 2 + math.tan(enemyAngle) * 500 / distance\n                local enemySize = math.max(20, math.min(100, 500 / distance))\n\n                love.graphics.setColor(enemy.color[1], enemy.color[2],\n                    enemy.color[3], 1)\n                love.graphics.rectangle(\"fill\", screenX - enemySize / 2, (love.graphics.getHeight() / 2) - enemySize / 2,\n                    enemySize, enemySize)\n                love.graphics.setColor(1, 1, 1)\n            end\n        end\n    end\nend\n\nfunction love.draw()\n    local screenWidth  = love.graphics.getWidth()\n    local screenHeight = love.graphics.getHeight()\n    local columnWidth  = screenWidth / 120\n\n    -- Drawing the floor and ceiling(Dark gray for floor, light gray for ceiling)\n    print(love.timer.getFPS())\n    love.graphics.setColor(0.2, 0.2, 0.2) -- Floor(R-G-B)\n    love.graphics.rectangle(\"fill\", 0, screenHeight / 2 - player.pitch * screenHeight, screenWidth, screenHeight / 2)\n    love.graphics.setColor(0.1, 0.1, 0.1) -- Ceiling(R-G-B)\n    love.graphics.rectangle(\"fill\", 0, 0 - player.pitch * screenHeight, screenWidth, screenHeight / 2)\n\n\n    for i = 0, 119 do\n        local rayData = rayResults[i]\n        if rayData then\n            local distance, side, texX, rayAngle = unpack(rayData)\n\n            local correctedDistance              = distance *\n                math.cos(i * (player.fov / 120) - player.fov / 2) -- Fish eye fix\n            local projectionPlane                = (screenWidth / 2) / math.tan(player.fov / 2)\n            local wallHeight                     = (projectionPlane / (correctedDistance + 0.1))\n\n            local fog                            = math.max(0, 1 - (correctedDistance / 10))\n            local brightness                     = (side == 1) and 0.7 or 1.0\n            love.graphics.setColor(fog * brightness, fog * brightness, fog * brightness)\n\n            local quad = textures.quads[texX] or textures.quads[0]\n\n            love.graphics.draw(textures.wall, quad, i * columnWidth,\n                (screenHeight - wallHeight) / 2, 0, columnWidth, wallHeight / textures.wall:getHeight())\n        end\n    end\n    DrawEnemies()\nend\n\nfunction love.mousemoved(_, _, dx, _)\n    player.angle = (player.angle + dx * player.sensitivity) % (2 * math.pi)\nend\n",
								"range":
								{
									"end":
									{
										"character": 0,
										"line": 322
									},
									"start":
									{
										"character": 0,
										"line": 0
									}
								}
							}
						],
						"process_placeholders": false,
						"required_view_version": null
					},
					"AQAAAAAAAAAAAAAAEy4AAAAAAAAULgAALS1bWwogICAgPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PQogICAgIC0tIFJheUNhc3RpbmcgaW1wbGVtZW50YXRpb24gZG9uZSB3aXRoIExvdmUyRAogICAgIC0tIEF1dGhvcjogTWlrZXkKICAgICAtLSBEYXRlOiAyLzgvMjAyNQogICAgPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PQpdXQotLQpsb3ZlLmdyYXBoaWNzLnNldERlZmF1bHRGaWx0ZXIoIm5lYXJlc3QiLCAibmVhcmVzdCIpCmxvdmUubW91c2Uuc2V0UmVsYXRpdmVNb2RlKHRydWUpCgoKbG9jYWwgcGxheWVyID0gewogICAgeCA9IDQsCiAgICB5ID0gNCwKICAgIGFuZ2xlID0gMCwKICAgIHBpdGNoID0gMCwKICAgIGZvdiA9IG1hdGgucGkgLyAzLAogICAgc3BlZWQgPSAzLAogICAgc2Vuc2l0aXZpdHkgPSAwLjAwMiwKfQoKbG9jYWwgZW5lbWllcyA9IHsKICAgIHsgeCA9IDE1LCB5ID0gOSwgIHNwZWVkID0gMS41LCBkaXJlY3Rpb24gPSAxLCBjb2xvciA9IHsgMSwgMCwgMCB9IH0sIC0tIFJlZAogICAgeyB4ID0gMywgIHkgPSAxMiwgc3BlZWQgPSAxLjMsIGRpcmVjdGlvbiA9IDEsIGNvbG9yID0geyAwLCAxLCAwIH0gfSwgLS0gR3JlZW4KICAgIHsgeCA9IDgsICB5ID0gNiwgIHNwZWVkID0gMS43LCBkaXJlY3Rpb24gPSAxLCBjb2xvciA9IHsgMCwgMCwgMSB9IH0sIC0tIEJsdWUKICAgIHsgeCA9IDEyLCB5ID0gMywgIHNwZWVkID0gMS4yLCBkaXJlY3Rpb24gPSAxLCBjb2xvciA9IHsgMSwgMSwgMCB9IH0sIC0tIFllbGxvdwogICAgeyB4ID0gNiwgIHkgPSAzLCAgc3BlZWQgPSAxLjQsIGRpcmVjdGlvbiA9IDEsIGNvbG9yID0geyAxLCAwLCAxIH0gfSwgIC0tIFB1cnBsZQp9Cgpsb2NhbCBtYXAgPSB7CiAgICB3aWR0aCA9IDE2LAogICAgaGVpZ2h0ID0gMTYsCiAgICBkYXRhID0gewogICAgICAgIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsCiAgICAgICAgMSwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMSwKICAgICAgICAxLCAwLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAwLCAxLAogICAgICAgIDEsIDAsIDEsIDAsIDAsIDEsIDAsIDAsIDAsIDAsIDAsIDAsIDAsIDEsIDAsIDEsCiAgICAgICAgMSwgMCwgMSwgMCwgMCwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMCwgMSwgMCwgMSwKICAgICAgICAxLCAwLCAxLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAxLCAwLCAxLCAwLCAxLAogICAgICAgIDEsIDAsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDAsIDEsIDAsIDEsIDAsIDEsCiAgICAgICAgMSwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMSwgMCwgMSwgMCwgMSwgMCwgMSwKICAgICAgICAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAwLCAxLCAwLCAxLCAwLCAxLCAwLCAxLAogICAgICAgIDEsIDAsIDAsIDAsIDAsIDAsIDAsIDAsIDAsIDEsIDAsIDEsIDAsIDEsIDAsIDEsCiAgICAgICAgMSwgMCwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMSwgMCwgMSwgMCwgMSwgMCwgMSwKICAgICAgICAxLCAwLCAxLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAxLCAwLCAxLCAwLCAxLAogICAgICAgIDEsIDAsIDEsIDAsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDEsIDAsIDEsIDAsIDEsCiAgICAgICAgMSwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMSwKICAgICAgICAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxCiAgICB9Cn0KCmxvY2FsIHRleHR1cmVzID0gewogICAgd2FsbCA9IGxvdmUuZ3JhcGhpY3MubmV3SW1hZ2UoInJlcy9tb3NzeS5wbmciKSwKICAgIHF1YWRzID0ge30KfQp0ZXh0dXJlcy53YWxsOnNldEZpbHRlcigibmVhcmVzdCIsICJuZWFyZXN0IikKCmZvciBpID0gMCwgdGV4dHVyZXMud2FsbDpnZXRXaWR0aCgpIC0gMSBkbwogICAgdGV4dHVyZXMucXVhZHNbaV0gPSBsb3ZlLmdyYXBoaWNzLm5ld1F1YWQoaSwgMCwgMSwgdGV4dHVyZXMud2FsbDpnZXRIZWlnaHQoKSwgdGV4dHVyZXMud2FsbDpnZXREaW1lbnNpb25zKCkpCmVuZAoKCmZ1bmN0aW9uIElzQ29sbGlkaW5nKHgsIHkpCiAgICBsb2NhbCBidWZmZXIgPSAwLjIKICAgIGxvY2FsIHRpbGVYID0gbWF0aC5mbG9vcih4KQogICAgbG9jYWwgdGlsZVkgPSBtYXRoLmZsb29yKHkpCgogICAgaWYgdGlsZVggPCAxIG9yIHRpbGVYID4gbWFwLndpZHRoIG9yIHRpbGVZIDwgMSBvciB0aWxlWSA+IG1hcC5oZWlnaHQgdGhlbgogICAgICAgIHJldHVybiB0cnVlCiAgICBlbmQKCiAgICByZXR1cm4gbWFwLmRhdGFbdGlsZVkgKiBtYXAud2lkdGggKyB0aWxlWCArIDFdID09IDEgb3IKICAgICAgICBtYXAuZGF0YVt0aWxlWSAqIG1hcC53aWR0aCArIG1hdGguZmxvb3IoeCAtIGJ1ZmZlcikgKyAxXSA9PSAxIG9yCiAgICAgICAgbWFwLmRhdGFbdGlsZVkgKiBtYXAud2lkdGggKyBtYXRoLmZsb29yKHggKyBidWZmZXIpICsgMV0gPT0gMSBvcgogICAgICAgIG1hcC5kYXRhW21hdGguZmxvb3IoeSAtIGJ1ZmZlcikgKiBtYXAud2lkdGggKyB0aWxlWCArIDFdID09IDEgb3IKICAgICAgICBtYXAuZGF0YVttYXRoLmZsb29yKHkgKyBidWZmZXIpICogbWFwLndpZHRoICsgdGlsZVggKyAxXSA9PSAxCmVuZAoKZnVuY3Rpb24gSXNQbGF5ZXJDb2xsaWRpbmcoeCwgeSkKICAgIGxvY2FsIGJ1ZmZlciA9IDAuMwogICAgcmV0dXJuIG1hdGguYWJzKHggLSBwbGF5ZXIueCkgPCBidWZmZXIgYW5kIG1hdGguYWJzKHkgLSBwbGF5ZXIueSkgPCBidWZmZXIKZW5kCgpmdW5jdGlvbiBtYXA6Z2V0KHgsIHkpCiAgICBpZiB4IDwgMSBvciB4ID4gc2VsZi53aWR0aCBvciB5IDwgMSBvciB5ID4gc2VsZi5oZWlnaHQgdGhlbgogICAgICAgIHJldHVybiAxCiAgICBlbmQKICAgIGxvY2FsIGluZGV4ID0gbWF0aC5mbG9vcih5KSAqIHNlbGYud2lkdGggKyBtYXRoLmZsb29yKHgpICsgMQogICAgcmV0dXJuIHNlbGYuZGF0YVtpbmRleF0gb3IgMQplbmQKCmxvY2FsIHJheVJlc3VsdHMgPSB7fQoKZnVuY3Rpb24gUHJlQ29tcHV0ZVJheXMoKQogICAgZm9yIGkgPSAwLCAxMTkgZG8KICAgICAgICBsb2NhbCByYXlBbmdsZSAgICAgICAgICAgICA9IHBsYXllci5hbmdsZSAtIChwbGF5ZXIuZm92IC8gMikgKyAoKGkgLyAxMTkpICogcGxheWVyLmZvdikKICAgICAgICBsb2NhbCBkaXN0YW5jZSwgc2lkZSwgdGV4WCA9IENhc3RSYXkocmF5QW5nbGUpCiAgICAgICAgcmF5UmVzdWx0c1tpXSAgICAgICAgICAgICAgPSB7IGRpc3RhbmNlLCBzaWRlLCB0ZXhYLCByYXlBbmdsZSB9CiAgICBlbmQKZW5kCgotLSBSYXljYXN0aW5nIG9wdGltaXplZCB3aXRoIEREQSB0byBiZXR0ZXIgY2FsY3VsYXRlIGRpc3RhbmNlIGFuZApmdW5jdGlvbiBDYXN0UmF5KGFuZ2xlKQogICAgbG9jYWwgc2luQSAgICAgICAgICAgICAgICA9IG1hdGguc2luKGFuZ2xlKQogICAgbG9jYWwgY29zQSAgICAgICAgICAgICAgICA9IG1hdGguY29zKGFuZ2xlKQogICAgbG9jYWwgbWFwWCwgbWFwWSAgICAgICAgICA9IG1hdGguZmxvb3IocGxheWVyLngpLCBtYXRoLmZsb29yKHBsYXllci55KQogICAgbG9jYWwgZGVsdGFEaXN0WCAgICAgICAgICA9IG1hdGguYWJzKDEgLyBjb3NBKQogICAgbG9jYWwgZGVsdGFEaXN0WSAgICAgICAgICA9IG1hdGguYWJzKDEgLyBzaW5BKQoKICAgIGxvY2FsIHN0ZXBYICAgICAgICAgICAgICAgPSAoY29zQSA8IDApIGFuZCAtMSBvciAxCiAgICBsb2NhbCBzdGVwWSAgICAgICAgICAgICAgID0gKHNpbkEgPCAwKSBhbmQgLTEgb3IgMQogICAgbG9jYWwgc2lkZURpc3RYICAgICAgICAgICA9IChjb3NBIDwgMCkgYW5kIChwbGF5ZXIueCAtIG1hcFgpICogZGVsdGFEaXN0WCBvciAobWFwWCArIDEgLSBwbGF5ZXIueCkgKiBkZWx0YURpc3RYCiAgICBsb2NhbCBzaWRlRGlzdFkgICAgICAgICAgID0gKHNpbkEgPCAwKSBhbmQgKHBsYXllci55IC0gbWFwWSkgKiBkZWx0YURpc3RZIG9yIChtYXBZICsgMSAtIHBsYXllci55KSAqIGRlbHRhRGlzdFkKCiAgICBsb2NhbCBoaXQsIHNpZGUsIGRpc3RhbmNlID0gZmFsc2UsIDAsIDAKICAgIHdoaWxlIG5vdCBoaXQgYW5kIGRpc3RhbmNlIDwgMTYgZG8KICAgICAgICBpZiBzaWRlRGlzdFggPCBzaWRlRGlzdFkgdGhlbgogICAgICAgICAgICBzaWRlRGlzdFggPSBzaWRlRGlzdFggKyBkZWx0YURpc3RYCiAgICAgICAgICAgIG1hcFggPSBtYXBYICsgc3RlcFgKICAgICAgICAgICAgc2lkZSA9IDAKICAgICAgICBlbHNlCiAgICAgICAgICAgIHNpZGVEaXN0WSA9IHNpZGVEaXN0WSArIGRlbHRhRGlzdFkKICAgICAgICAgICAgbWFwWSA9IG1hcFkgKyBzdGVwWQogICAgICAgICAgICBzaWRlID0gMQogICAgICAgIGVuZAogICAgICAgIGlmIG1hcDpnZXQobWFwWCwgbWFwWSkgPT0gMSB0aGVuCiAgICAgICAgICAgIGhpdCA9IHRydWUKICAgICAgICAgICAgZGlzdGFuY2UgPSAoc2lkZSA9PSAwKSBhbmQgKHNpZGVEaXN0WCAtIGRlbHRhRGlzdFgpIG9yIChzaWRlRGlzdFkgLSBkZWx0YURpc3RZKQogICAgICAgIGVuZAogICAgZW5kCgogICAgbG9jYWwgd2FsbEhpdAogICAgaWYgc2lkZSA9PSAwIHRoZW4KICAgICAgICB3YWxsSGl0ID0gcGxheWVyLnkgKyBkaXN0YW5jZSAqIHNpbkEKICAgIGVsc2UKICAgICAgICB3YWxsSGl0ID0gcGxheWVyLnggKyBkaXN0YW5jZSAqIGNvc0EKICAgIGVuZAogICAgd2FsbEhpdCA9IHdhbGxIaXQgLSBtYXRoLmZsb29yKHdhbGxIaXQpIC0tIEdldCBmcmFjdGlvbmFsIHBhcnQKICAgIGxvY2FsIHRleFggPSBtYXRoLmZsb29yKHdhbGxIaXQgKiB0ZXh0dXJlcy53YWxsOmdldFdpZHRoKCkgKyAwLjUpICUgdGV4dHVyZXMud2FsbDpnZXRXaWR0aCgpCiAgICAtLXRleFggPSBtYXRoLm1heCgwLCBtYXRoLm1pbih0ZXh0dXJlcy53YWxsOmdldFdpZHRoKCkgLSAxLCB0ZXhYKSkKCiAgICByZXR1cm4gZGlzdGFuY2UsIHNpZGUsIHRleFggLS0gVGV4dHVyZSBYIGNvb3JkaW5hdGUKZW5kCgpmdW5jdGlvbiBVcGRhdGVFbmVtaWVzKGR0KQogICAgZm9yIF8sIGVuZW15IGluIGlwYWlycyhlbmVtaWVzKSBkbwogICAgICAgIGxvY2FsIGR4ICAgICAgID0gcGxheWVyLnggLSBlbmVteS54CiAgICAgICAgbG9jYWwgZHkgICAgICAgPSBwbGF5ZXIueSAtIGVuZW15LnkKICAgICAgICBsb2NhbCBkaXN0YW5jZSA9IG1hdGguc3FydChkeCBeIDIgKyBkeSBeIDIpCgogICAgICAgIGlmIElzUGxheWVyQ29sbGlkaW5nKGVuZW15LngsIGVuZW15LnkpIHRoZW4KICAgICAgICAgICAgcHJpbnQoIkVORU1ZIENPTExJREVEIFdJVEggUExBWUVSIikKICAgICAgICAgICAgcmV0dXJuCiAgICAgICAgZW5kCgogICAgICAgIC0tIE1vdmUgdG93YXJkcyBwbGF5ZXIgaWYgbm90IHRvbyBjbG9zZQogICAgICAgIGlmIGRpc3RhbmNlID4gMC4zIHRoZW4KICAgICAgICAgICAgbG9jYWwgYXBwcm9hY2hTcGVlZCA9IG1hdGgubWluKGVuZW15LnNwZWVkLCBkaXN0YW5jZSAqIDEuNSkgLS0gU2xvd3MgZG93biBuZWFyIHBsYXllcgogICAgICAgICAgICBsb2NhbCBtb3ZlWCAgICAgICAgID0gKGR4IC8gZGlzdGFuY2UpICogYXBwcm9hY2hTcGVlZCAqIGR0CiAgICAgICAgICAgIGxvY2FsIG1vdmVZICAgICAgICAgPSAoZHkgLyBkaXN0YW5jZSkgKiBhcHByb2FjaFNwZWVkICogZHQKCiAgICAgICAgICAgIGxvY2FsIGZ1dHVyZVggICAgICAgPSBlbmVteS54ICsgbW92ZVgKICAgICAgICAgICAgbG9jYWwgZnV0dXJlWSAgICAgICA9IGVuZW15LnkgKyBtb3ZlWQoKICAgICAgICAgICAgbG9jYWwgY2FuTW92ZVggICAgICA9IG5vdCBJc0NvbGxpZGluZyhmdXR1cmVYLCBlbmVteS55KSBhbmQgbm90IElzUGxheWVyQ29sbGlkaW5nKGZ1dHVyZVgsIGVuZW15LnkpCiAgICAgICAgICAgIGxvY2FsIGNhbk1vdmVZICAgICAgPSBub3QgSXNDb2xsaWRpbmcoZW5lbXkueCwgZnV0dXJlWSkgYW5kIG5vdCBJc1BsYXllckNvbGxpZGluZyhlbmVteS54LCBmdXR1cmVZKQoKICAgICAgICAgICAgaWYgY2FuTW92ZVggdGhlbgogICAgICAgICAgICAgICAgZW5lbXkueCA9IGZ1dHVyZVgKICAgICAgICAgICAgZW5kCiAgICAgICAgICAgIGlmIGNhbk1vdmVZIHRoZW4KICAgICAgICAgICAgICAgIGVuZW15LnkgPSBmdXR1cmVZCiAgICAgICAgICAgIGVuZAoKICAgICAgICAgICAgaWYgbm90IGNhbk1vdmVYIGFuZCBub3QgY2FuTW92ZVkgdGhlbgogICAgICAgICAgICAgICAgcHJpbnQoIkVORU1ZIFNUVUNLOiBUUllJTkcgVE8gU0xJREUiKQoKICAgICAgICAgICAgICAgIGlmIG1hdGguYWJzKGR4KSA+IG1hdGguYWJzKGR5KSB0aGVuCiAgICAgICAgICAgICAgICAgICAgaWYgbm90IElzQ29sbGlkaW5nKGVuZW15LngsIGVuZW15LnkgKyAwLjMpIHRoZW4KICAgICAgICAgICAgICAgICAgICAgICAgZW5lbXkueSA9IGVuZW15LnkgKyAwLjMKICAgICAgICAgICAgICAgICAgICBlbHNlaWYgbm90IElzQ29sbGlkaW5nKGVuZW15LngsIGVuZW15LnkgLSAwLjMpIHRoZW4KICAgICAgICAgICAgICAgICAgICAgICAgZW5lbXkueSA9IGVuZW15LnkgLSAwLjMKICAgICAgICAgICAgICAgICAgICBlbmQKICAgICAgICAgICAgICAgIGVsc2UKICAgICAgICAgICAgICAgICAgICBpZiBub3QgSXNDb2xsaWRpbmcoZW5lbXkueCArIDAuMywgZW5lbXkueSkgdGhlbgogICAgICAgICAgICAgICAgICAgICAgICBlbmVteS54ID0gZW5lbXkueCArIDAuMwogICAgICAgICAgICAgICAgICAgIGVsc2VpZiBub3QgSXNDb2xsaWRpbmcoZW5lbXkueCAtIDAuMywgZW5lbXkueSkgdGhlbgogICAgICAgICAgICAgICAgICAgICAgICBlbmVteS54ID0gZW5lbXkueCAtIDAuMwogICAgICAgICAgICAgICAgICAgIGVuZAogICAgICAgICAgICAgICAgZW5kCiAgICAgICAgICAgIGVuZAogICAgICAgIGVuZAogICAgZW5kCmVuZAoKZnVuY3Rpb24gbG92ZS51cGRhdGUoZHQpCiAgICBQcmVDb21wdXRlUmF5cygpCiAgICBVcGRhdGVFbmVtaWVzKGR0KQoKICAgIGxvY2FsIGlzUnVubmluZyAgID0gbG92ZS5rZXlib2FyZC5pc0Rvd24oImxzaGlmdCIpIG9yIGxvdmUua2V5Ym9hcmQuaXNEb3duKCJyc2hpZnQiKQogICAgbG9jYWwgbW92ZVNwZWVkICAgPSAoaXNSdW5uaW5nIGFuZCA0IG9yIDIpICogZHQgLS0gU3ByaW50aW5nIHNwZWVkCiAgICBsb2NhbCBzdHJhZmVTcGVlZCA9IG1vdmVTcGVlZCAqIDAuNyAgICAgICAgICAgICAtLSBNb2RpZnkgYXMgbmVlZGVkCiAgICBsb2NhbCByb3RTcGVlZCAgICA9IDEuNiAqIGR0CgogICAgbG9jYWwgbmV3WCAgICAgICAgPSBwbGF5ZXIueAogICAgbG9jYWwgbmV3WSAgICAgICAgPSBwbGF5ZXIueQoKCiAgICBpZiBsb3ZlLmtleWJvYXJkLmlzRG93bigidyIpIHRoZW4KICAgICAgICBuZXdYID0gcGxheWVyLnggKyBtYXRoLmNvcyhwbGF5ZXIuYW5nbGUpICogbW92ZVNwZWVkCiAgICAgICAgbmV3WSA9IHBsYXllci55ICsgbWF0aC5zaW4ocGxheWVyLmFuZ2xlKSAqIG1vdmVTcGVlZAogICAgZW5kCiAgICBpZiBsb3ZlLmtleWJvYXJkLmlzRG93bigicyIpIHRoZW4KICAgICAgICBuZXdYID0gcGxheWVyLnggLSBtYXRoLmNvcyhwbGF5ZXIuYW5nbGUpICogbW92ZVNwZWVkCiAgICAgICAgbmV3WSA9IHBsYXllci55IC0gbWF0aC5zaW4ocGxheWVyLmFuZ2xlKSAqIG1vdmVTcGVlZAogICAgZW5kCiAgICBpZiBsb3ZlLmtleWJvYXJkLmlzRG93bigiYSIpIHRoZW4KICAgICAgICBuZXdYID0gcGxheWVyLnggKyBtYXRoLnNpbihwbGF5ZXIuYW5nbGUpICogc3RyYWZlU3BlZWQKICAgICAgICBuZXdZID0gcGxheWVyLnkgLSBtYXRoLmNvcyhwbGF5ZXIuYW5nbGUpICogc3RyYWZlU3BlZWQKICAgIGVuZAogICAgaWYgbG92ZS5rZXlib2FyZC5pc0Rvd24oImQiKSB0aGVuCiAgICAgICAgbmV3WCA9IHBsYXllci54IC0gbWF0aC5zaW4ocGxheWVyLmFuZ2xlKSAqIHN0cmFmZVNwZWVkCiAgICAgICAgbmV3WSA9IHBsYXllci55ICsgbWF0aC5jb3MocGxheWVyLmFuZ2xlKSAqIHN0cmFmZVNwZWVkCiAgICBlbmQKCiAgICAtLSBSb3RhdGlvbiB3aXRoIGxlZnQgYW5kIHJpZ2h0IGFycm93IGtleXMKICAgIGlmIGxvdmUua2V5Ym9hcmQuaXNEb3duKCJsZWZ0IikgdGhlbgogICAgICAgIHBsYXllci5hbmdsZSA9IChwbGF5ZXIuYW5nbGUgLSByb3RTcGVlZCkgJSAoMiAqIG1hdGgucGkpCiAgICBlbmQKICAgIGlmIGxvdmUua2V5Ym9hcmQuaXNEb3duKCJyaWdodCIpIHRoZW4KICAgICAgICBwbGF5ZXIuYW5nbGUgPSAocGxheWVyLmFuZ2xlICsgcm90U3BlZWQpICUgKDIgKiBtYXRoLnBpKQogICAgZW5kCgogICAgaWYgbm90IElzQ29sbGlkaW5nKG5ld1gsIHBsYXllci55KSB0aGVuIHBsYXllci54ID0gbmV3WCBlbmQKICAgIGlmIG5vdCBJc0NvbGxpZGluZyhwbGF5ZXIueCwgbmV3WSkgdGhlbiBwbGF5ZXIueSA9IG5ld1kgZW5kCgogICAgaWYgbG92ZS5rZXlib2FyZC5pc0Rvd24oImVzY2FwZSIpIHRoZW4KICAgICAgICBsb3ZlLmV2ZW50LnF1aXQoKQogICAgZW5kCmVuZAoKZnVuY3Rpb24gRHJhd0VuZW1pZXMoKQogICAgZm9yIF8sIGVuZW15IGluIGlwYWlycyhlbmVtaWVzKSBkbwogICAgICAgIGxvY2FsIGR4ID0gZW5lbXkueCAtIHBsYXllci54CiAgICAgICAgbG9jYWwgZHkgPSBlbmVteS55IC0gcGxheWVyLnkKICAgICAgICBsb2NhbCBkaXN0YW5jZSA9IG1hdGguc3FydChkeCAqIGR4ICsgZHkgKiBkeSkKCiAgICAgICAgLS0gRW5zdXJlIGVuZW15IGlzIHdpdGhpbiB2aWV3CiAgICAgICAgaWYgZGlzdGFuY2UgPiAwLjIgdGhlbgogICAgICAgICAgICBsb2NhbCBlbmVteUFuZ2xlID0gbWF0aC5hdGFuMihkeSwgZHgpIC0gcGxheWVyLmFuZ2xlCiAgICAgICAgICAgIGVuZW15QW5nbGUgPSAoZW5lbXlBbmdsZSArIG1hdGgucGkpICUgKDIgKiBtYXRoLnBpKSAtIG1hdGgucGkKCiAgICAgICAgICAgIGxvY2FsIHN0ZXBYID0gZHggLyBkaXN0YW5jZSAqIDAuMQogICAgICAgICAgICBsb2NhbCBzdGVwWSA9IGR5IC8gZGlzdGFuY2UgKiAwLjEKICAgICAgICAgICAgbG9jYWwgY2hlY2tYID0gcGxheWVyLngKICAgICAgICAgICAgbG9jYWwgY2hlY2tZID0gcGxheWVyLnkKICAgICAgICAgICAgbG9jYWwgaXNCbG9ja2VkID0gZmFsc2UKCiAgICAgICAgICAgIGZvciBpID0gMSwgbWF0aC5mbG9vcihkaXN0YW5jZSAvIDAuMSkgZG8KICAgICAgICAgICAgICAgIGNoZWNrWCA9IGNoZWNrWCArIHN0ZXBYCiAgICAgICAgICAgICAgICBjaGVja1kgPSBjaGVja1kgKyBzdGVwWQogICAgICAgICAgICAgICAgaWYgSXNDb2xsaWRpbmcoY2hlY2tYLCBjaGVja1kpIHRoZW4KICAgICAgICAgICAgICAgICAgICBpc0Jsb2NrZWQgPSB0cnVlCiAgICAgICAgICAgICAgICAgICAgYnJlYWsKICAgICAgICAgICAgICAgIGVuZAogICAgICAgICAgICBlbmQKCiAgICAgICAgICAgIC0tIENoZWNrIGlmIGVuZW15IGlzIHdoaW4gRk9WCiAgICAgICAgICAgIGlmIG5vdCBpc0Jsb2NrZWQgYW5kIG1hdGguYWJzKGVuZW15QW5nbGUpIDwgcGxheWVyLmZvdiAvIDIgdGhlbgogICAgICAgICAgICAgICAgbG9jYWwgc2NyZWVuWCA9IGxvdmUuZ3JhcGhpY3MuZ2V0V2lkdGgoKSAvIDIgKyBtYXRoLnRhbihlbmVteUFuZ2xlKSAqIDUwMCAvIGRpc3RhbmNlCiAgICAgICAgICAgICAgICBsb2NhbCBlbmVteVNpemUgPSBtYXRoLm1heCgyMCwgbWF0aC5taW4oMTAwLCA1MDAgLyBkaXN0YW5jZSkpCgogICAgICAgICAgICAgICAgbG92ZS5ncmFwaGljcy5zZXRDb2xvcihlbmVteS5jb2xvclsxXSwgZW5lbXkuY29sb3JbMl0sCiAgICAgICAgICAgICAgICAgICAgZW5lbXkuY29sb3JbM10sIDEpCiAgICAgICAgICAgICAgICBsb3ZlLmdyYXBoaWNzLnJlY3RhbmdsZSgiZmlsbCIsIHNjcmVlblggLSBlbmVteVNpemUgLyAyLCAobG92ZS5ncmFwaGljcy5nZXRIZWlnaHQoKSAvIDIpIC0gZW5lbXlTaXplIC8gMiwKICAgICAgICAgICAgICAgICAgICBlbmVteVNpemUsIGVuZW15U2l6ZSkKICAgICAgICAgICAgICAgIGxvdmUuZ3JhcGhpY3Muc2V0Q29sb3IoMSwgMSwgMSkKICAgICAgICAgICAgZW5kCiAgICAgICAgZW5kCiAgICBlbmQKZW5kCgpmdW5jdGlvbiBsb3ZlLmRyYXcoKQogICAgbG9jYWwgc2NyZWVuV2lkdGggID0gbG92ZS5ncmFwaGljcy5nZXRXaWR0aCgpCiAgICBsb2NhbCBzY3JlZW5IZWlnaHQgPSBsb3ZlLmdyYXBoaWNzLmdldEhlaWdodCgpCiAgICBsb2NhbCBjb2x1bW5XaWR0aCAgPSBzY3JlZW5XaWR0aCAvIDEyMAoKICAgIC0tIERyYXdpbmcgdGhlIGZsb29yIGFuZCBjZWlsaW5nKERhcmsgZ3JheSBmb3IgZmxvb3IsIGxpZ2h0IGdyYXkgZm9yIGNlaWxpbmcpCiAgICBwcmludChsb3ZlLnRpbWVyLmdldEZQUygpKQogICAgbG92ZS5ncmFwaGljcy5zZXRDb2xvcigwLjIsIDAuMiwgMC4yKSAtLSBGbG9vcihSLUctQikKICAgIGxvdmUuZ3JhcGhpY3MucmVjdGFuZ2xlKCJmaWxsIiwgMCwgc2NyZWVuSGVpZ2h0IC8gMiAtIHBsYXllci5waXRjaCAqIHNjcmVlbkhlaWdodCwgc2NyZWVuV2lkdGgsIHNjcmVlbkhlaWdodCAvIDIpCiAgICBsb3ZlLmdyYXBoaWNzLnNldENvbG9yKDAuMSwgMC4xLCAwLjEpIC0tIENlaWxpbmcoUi1HLUIpCiAgICBsb3ZlLmdyYXBoaWNzLnJlY3RhbmdsZSgiZmlsbCIsIDAsIDAgLSBwbGF5ZXIucGl0Y2ggKiBzY3JlZW5IZWlnaHQsIHNjcmVlbldpZHRoLCBzY3JlZW5IZWlnaHQgLyAyKQoKCiAgICBmb3IgaSA9IDAsIDExOSBkbwogICAgICAgIGxvY2FsIHJheURhdGEgPSByYXlSZXN1bHRzW2ldCiAgICAgICAgaWYgcmF5RGF0YSB0aGVuCiAgICAgICAgICAgIGxvY2FsIGRpc3RhbmNlLCBzaWRlLCB0ZXhYLCByYXlBbmdsZSA9IHVucGFjayhyYXlEYXRhKQoKICAgICAgICAgICAgbG9jYWwgY29ycmVjdGVkRGlzdGFuY2UgICAgICAgICAgICAgID0gZGlzdGFuY2UgKgogICAgICAgICAgICAgICAgbWF0aC5jb3MoaSAqIChwbGF5ZXIuZm92IC8gMTIwKSAtIHBsYXllci5mb3YgLyAyKSAtLSBGaXNoIGV5ZSBmaXgKICAgICAgICAgICAgbG9jYWwgcHJvamVjdGlvblBsYW5lICAgICAgICAgICAgICAgID0gKHNjcmVlbldpZHRoIC8gMikgLyBtYXRoLnRhbihwbGF5ZXIuZm92IC8gMikKICAgICAgICAgICAgbG9jYWwgd2FsbEhlaWdodCAgICAgICAgICAgICAgICAgICAgID0gKHByb2plY3Rpb25QbGFuZSAvIChjb3JyZWN0ZWREaXN0YW5jZSArIDAuMSkpCgogICAgICAgICAgICBsb2NhbCBmb2cgICAgICAgICAgICAgICAgICAgICAgICAgICAgPSBtYXRoLm1heCgwLCAxIC0gKGNvcnJlY3RlZERpc3RhbmNlIC8gMTApKQogICAgICAgICAgICBsb2NhbCBicmlnaHRuZXNzICAgICAgICAgICAgICAgICAgICAgPSAoc2lkZSA9PSAxKSBhbmQgMC43IG9yIDEuMAogICAgICAgICAgICBsb3ZlLmdyYXBoaWNzLnNldENvbG9yKGZvZyAqIGJyaWdodG5lc3MsIGZvZyAqIGJyaWdodG5lc3MsIGZvZyAqIGJyaWdodG5lc3MpCgogICAgICAgICAgICBsb2NhbCBxdWFkID0gdGV4dHVyZXMucXVhZHNbdGV4WF0gb3IgdGV4dHVyZXMucXVhZHNbMF0KCiAgICAgICAgICAgIGxvdmUuZ3JhcGhpY3MuZHJhdyh0ZXh0dXJlcy53YWxsLCBxdWFkLCBpICogY29sdW1uV2lkdGgsCiAgICAgICAgICAgICAgICAoc2NyZWVuSGVpZ2h0IC0gd2FsbEhlaWdodCkgLyAyLCAwLCBjb2x1bW5XaWR0aCwgd2FsbEhlaWdodCAvIHRleHR1cmVzLndhbGw6Z2V0SGVpZ2h0KCkpCiAgICAgICAgZW5kCiAgICBlbmQKICAgIERyYXdFbmVtaWVzKCkKZW5kCgpmdW5jdGlvbiBsb3ZlLm1vdXNlbW92ZWQoXywgXywgZHgsIF8pCiAgICBwbGF5ZXIuYW5nbGUgPSAocGxheWVyLmFuZ2xlICsgZHggKiBwbGF5ZXIuc2Vuc2l0aXZpdHkpICUgKDIgKiBtYXRoLnBpKQplbmQK",
					"AQAAAAAAAAABAAAASwEAAAAAAABLAQAAAAAAAAAAAAAAAPC/"
				],
				[
					490,
					1,
					"insert",
					{
						"characters": "\nlove.gra"
					},
					"DAAAACcmAAAAAAAAKCYAAAAAAAAAAAAAKCYAAAAAAAA8JgAAAAAAAAAAAAAoJgAAAAAAACgmAAAAAAAAFAAAACAgICAgICAgICAgICAgICAgICAgKCYAAAAAAAA4JgAAAAAAAAAAAAA4JgAAAAAAADkmAAAAAAAAAAAAADkmAAAAAAAAOiYAAAAAAAAAAAAAOiYAAAAAAAA7JgAAAAAAAAAAAAA7JgAAAAAAADwmAAAAAAAAAAAAADwmAAAAAAAAPSYAAAAAAAAAAAAAPSYAAAAAAAA+JgAAAAAAAAAAAAA+JgAAAAAAAD8mAAAAAAAAAAAAAD8mAAAAAAAAQCYAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAJyYAAAAAAAAnJgAAAAAAAAAAAAAAAPC/"
				],
				[
					491,
					1,
					"insert",
					{
						"characters": "phics.se"
					},
					"CAAAAEAmAAAAAAAAQSYAAAAAAAAAAAAAQSYAAAAAAABCJgAAAAAAAAAAAABCJgAAAAAAAEMmAAAAAAAAAAAAAEMmAAAAAAAARCYAAAAAAAAAAAAARCYAAAAAAABFJgAAAAAAAAAAAABFJgAAAAAAAEYmAAAAAAAAAAAAAEYmAAAAAAAARyYAAAAAAAAAAAAARyYAAAAAAABIJgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAQCYAAAAAAABAJgAAAAAAAAAAAAAAAPC/"
				],
				[
					492,
					1,
					"insert",
					{
						"characters": "tColor"
					},
					"BgAAAEgmAAAAAAAASSYAAAAAAAAAAAAASSYAAAAAAABKJgAAAAAAAAAAAABKJgAAAAAAAEsmAAAAAAAAAAAAAEsmAAAAAAAATCYAAAAAAAAAAAAATCYAAAAAAABNJgAAAAAAAAAAAABNJgAAAAAAAE4mAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAASCYAAAAAAABIJgAAAAAAAAAAAAAAAPC/"
				],
				[
					493,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAAE4mAAAAAAAAUCYAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAATiYAAAAAAABOJgAAAAAAAAAAAAAAAPC/"
				],
				[
					494,
					1,
					"insert",
					{
						"characters": "enemy.color"
					},
					"CwAAAE8mAAAAAAAAUCYAAAAAAAAAAAAAUCYAAAAAAABRJgAAAAAAAAAAAABRJgAAAAAAAFImAAAAAAAAAAAAAFImAAAAAAAAUyYAAAAAAAAAAAAAUyYAAAAAAABUJgAAAAAAAAAAAABUJgAAAAAAAFUmAAAAAAAAAAAAAFUmAAAAAAAAViYAAAAAAAAAAAAAViYAAAAAAABXJgAAAAAAAAAAAABXJgAAAAAAAFgmAAAAAAAAAAAAAFgmAAAAAAAAWSYAAAAAAAAAAAAAWSYAAAAAAABaJgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAATyYAAAAAAABPJgAAAAAAAAAAAAAAAPC/"
				],
				[
					495,
					1,
					"insert_snippet",
					{
						"contents": "[$0]"
					},
					"AQAAAFomAAAAAAAAXCYAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAWiYAAAAAAABaJgAAAAAAAAAAAAAAAPC/"
				],
				[
					496,
					1,
					"insert",
					{
						"characters": "5"
					},
					"AQAAAFsmAAAAAAAAXCYAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAWyYAAAAAAABbJgAAAAAAAAAAAAAAAPC/"
				],
				[
					498,
					1,
					"insert",
					{
						"characters": ","
					},
					"AQAAAF0mAAAAAAAAXiYAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAXSYAAAAAAABdJgAAAAAAAAAAAAAAAPC/"
				],
				[
					499,
					1,
					"insert",
					{
						"characters": " 1"
					},
					"AgAAAF4mAAAAAAAAXyYAAAAAAAAAAAAAXyYAAAAAAABgJgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAXiYAAAAAAABeJgAAAAAAAAAAAAAAAPC/"
				],
				[
					508,
					1,
					"insert",
					{
						"characters": " _,"
					},
					"AwAAAF4mAAAAAAAAXyYAAAAAAAAAAAAAXyYAAAAAAABgJgAAAAAAAAAAAABgJgAAAAAAAGEmAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAXiYAAAAAAABeJgAAAAAAAAAAAAAAAPC/"
				],
				[
					509,
					1,
					"insert",
					{
						"characters": " _,"
					},
					"AwAAAGEmAAAAAAAAYiYAAAAAAAAAAAAAYiYAAAAAAABjJgAAAAAAAAAAAABjJgAAAAAAAGQmAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAYSYAAAAAAABhJgAAAAAAAAAAAAAAAPC/"
				],
				[
					510,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAGQmAAAAAAAAZSYAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAZCYAAAAAAABkJgAAAAAAAAAAAAAAAPC/"
				],
				[
					517,
					1,
					"left_delete",
					null,
					"AQAAAGUmAAAAAAAAZSYAAAAAAAABAAAAIA",
					"AQAAAAAAAAABAAAAZiYAAAAAAABmJgAAAAAAAAAAAAAAAPC/"
				],
				[
					520,
					1,
					"left_delete",
					null,
					"AQAAAGUmAAAAAAAAZSYAAAAAAAABAAAAMQ",
					"AQAAAAAAAAABAAAAZiYAAAAAAABmJgAAAAAAAAAAAAAAAPC/"
				],
				[
					521,
					1,
					"insert",
					{
						"characters": "_,"
					},
					"AgAAAGUmAAAAAAAAZiYAAAAAAAAAAAAAZiYAAAAAAABnJgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAZSYAAAAAAABlJgAAAAAAAAAAAAAAAPC/"
				],
				[
					525,
					1,
					"left_delete",
					null,
					"AQAAAGYmAAAAAAAAZiYAAAAAAAABAAAALA",
					"AQAAAAAAAAABAAAAZyYAAAAAAABnJgAAAAAAAAAAAAAAAPC/"
				],
				[
					533,
					1,
					"insert",
					{
						"characters": ")"
					},
					"AgAAAF0mAAAAAAAAXiYAAAAAAAAAAAAAXiYAAAAAAABeJgAAAAAAAAoAAAAsIF8sIF8sIF8p",
					"AQAAAAAAAAABAAAAZyYAAAAAAABdJgAAAAAAAAAAAAAAAPC/"
				],
				[
					553,
					1,
					"left_delete",
					null,
					"AQAAAFsmAAAAAAAAWyYAAAAAAAABAAAANQ",
					"AQAAAAAAAAABAAAAXCYAAAAAAABcJgAAAAAAAAAAAAAAAPC/"
				],
				[
					554,
					1,
					"insert",
					{
						"characters": "4"
					},
					"AQAAAFsmAAAAAAAAXCYAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAWyYAAAAAAABbJgAAAAAAAAAAAAAAAPC/"
				],
				[
					562,
					1,
					"insert",
					{
						"characters": ","
					},
					"AQAAAF0mAAAAAAAAXiYAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAXSYAAAAAAABdJgAAAAAAAAAAAAAAAPC/"
				],
				[
					563,
					1,
					"insert",
					{
						"characters": " _,"
					},
					"AwAAAF4mAAAAAAAAXyYAAAAAAAAAAAAAXyYAAAAAAABgJgAAAAAAAAAAAABgJgAAAAAAAGEmAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAXiYAAAAAAABeJgAAAAAAAAAAAAAAAPC/"
				],
				[
					564,
					1,
					"insert",
					{
						"characters": " _,"
					},
					"AwAAAGEmAAAAAAAAYiYAAAAAAAAAAAAAYiYAAAAAAABjJgAAAAAAAAAAAABjJgAAAAAAAGQmAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAYSYAAAAAAABhJgAAAAAAAAAAAAAAAPC/"
				],
				[
					565,
					1,
					"insert",
					{
						"characters": " _,"
					},
					"AwAAAGQmAAAAAAAAZSYAAAAAAAAAAAAAZSYAAAAAAABmJgAAAAAAAAAAAABmJgAAAAAAAGcmAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAZCYAAAAAAABkJgAAAAAAAAAAAAAAAPC/"
				],
				[
					566,
					2,
					"left_delete",
					null,
					"AgAAAGYmAAAAAAAAZiYAAAAAAAABAAAALGUmAAAAAAAAZSYAAAAAAAABAAAAXw",
					"AQAAAAAAAAABAAAAZyYAAAAAAABnJgAAAAAAAAAAAAAAAPC/"
				],
				[
					567,
					1,
					"insert",
					{
						"characters": "1"
					},
					"AQAAAGUmAAAAAAAAZiYAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAZSYAAAAAAABlJgAAAAAAAAAAAAAAAPC/"
				],
				[
					576,
					1,
					"run_macro_file",
					{
						"file": "res://Packages/Default/Delete Line.sublime-macro"
					},
					"AQAAACgmAAAAAAAAKCYAAAAAAABAAAAAICAgICAgICAgICAgICAgIGxvdmUuZ3JhcGhpY3Muc2V0Q29sb3IoZW5lbXkuY29sb3JbNF0sIF8sIF8sIDEpCg",
					"AQAAAAAAAAABAAAAZyYAAAAAAABnJgAAAAAAAAAAAAAAAPC/"
				],
				[
					586,
					1,
					"insert",
					{
						"characters": "\n\n"
					},
					"AgAAACMnAAAAAAAAJCcAAAAAAAAAAAAAJCcAAAAAAAAlJwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAIycAAAAAAAAjJwAAAAAAAAAAAAAAAPC/"
				],
				[
					587,
					1,
					"paste",
					null,
					"AQAAACUnAAAAAAAAuycAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAJScAAAAAAAAlJwAAAAAAAAAAAAAAAPC/"
				],
				[
					593,
					2,
					"left_delete",
					null,
					"AgAAACUnAAAAAAAAJScAAAAAAACVAAAAZm9yIGksIGVuZW15IGluIGlwYWlycyhlbmVtaWVzKSBkbwogICAgcHJpbnQoIkVuZW15ICIgLi4gaSAuLiAiIGF0OiIsIGVuZW15LngsIGVuZW15LnksICJDb2xvcjoiLCBlbmVteS5jb2xvclsxXSwgZW5lbXkuY29sb3JbMl0sIGVuZW15LmNvbG9yWzNdKQplbmQkJwAAAAAAACQnAAAAAAAAAQAAAAo",
					"AQAAAAAAAAABAAAAuicAAAAAAAAlJwAAAAAAAAAAAAAAAPC/"
				],
				[
					596,
					2,
					"left_delete",
					null,
					"AgAAACQnAAAAAAAAJCcAAAAAAAABAAAACiMnAAAAAAAAIycAAAAAAAABAAAACg",
					"AQAAAAAAAAABAAAAJScAAAAAAAAlJwAAAAAAAAAAAAAAADVA"
				],
				[
					604,
					1,
					"left_delete",
					null,
					"AQAAACwDAAAAAAAALAMAAAAAAAABAAAAMw",
					"AQAAAAAAAAABAAAALQMAAAAAAAAtAwAAAAAAAAAAAAAAAPC/"
				],
				[
					605,
					1,
					"insert",
					{
						"characters": "4"
					},
					"AQAAACwDAAAAAAAALQMAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAALAMAAAAAAAAsAwAAAAAAAAAAAAAAAPC/"
				],
				[
					615,
					1,
					"left_delete",
					null,
					"AQAAACwDAAAAAAAALAMAAAAAAAABAAAANA",
					"AQAAAAAAAAABAAAALQMAAAAAAAAtAwAAAAAAAAAAAAAAAPC/"
				],
				[
					616,
					1,
					"insert",
					{
						"characters": "15"
					},
					"AgAAACwDAAAAAAAALQMAAAAAAAAAAAAALQMAAAAAAAAuAwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAALAMAAAAAAAAsAwAAAAAAAAAAAAAAAPC/"
				],
				[
					635,
					1,
					"left_delete",
					null,
					"AQAAACQDAAAAAAAAJAMAAAAAAAABAAAANg",
					"AQAAAAAAAAABAAAAJQMAAAAAAAAlAwAAAAAAAAAAAAAAAPC/"
				],
				[
					636,
					1,
					"insert",
					{
						"characters": "4"
					},
					"AQAAACQDAAAAAAAAJQMAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAJAMAAAAAAAAkAwAAAAAAAAAAAAAAAPC/"
				],
				[
					638,
					1,
					"left_delete",
					null,
					"AQAAACwDAAAAAAAALAMAAAAAAAABAAAAMQ",
					"AQAAAAAAAAABAAAALQMAAAAAAAAtAwAAAAAAAAAAAAAAAPC/"
				],
				[
					653,
					1,
					"left_delete",
					null,
					"AQAAACQDAAAAAAAAJAMAAAAAAAABAAAANA",
					"AQAAAAAAAAABAAAAJQMAAAAAAAAlAwAAAAAAAAAAAAAAAPC/"
				],
				[
					654,
					1,
					"insert",
					{
						"characters": "2"
					},
					"AQAAACQDAAAAAAAAJQMAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAJAMAAAAAAAAkAwAAAAAAAAAAAAAAAPC/"
				],
				[
					656,
					1,
					"left_delete",
					null,
					"AQAAACwDAAAAAAAALAMAAAAAAAABAAAANQ",
					"AQAAAAAAAAABAAAALQMAAAAAAAAtAwAAAAAAAAAAAAAAAPC/"
				],
				[
					657,
					1,
					"insert",
					{
						"characters": "2"
					},
					"AQAAACwDAAAAAAAALQMAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAALAMAAAAAAAAsAwAAAAAAAAAAAAAAAPC/"
				]
			]
		}
	],
	"build_system": "Packages/Lua Love/LuaLove.sublime-build",
	"build_system_choices":
	[
		[
			[
				[
					"Packages/Lua Love/LuaLove.sublime-build",
					""
				],
				[
					"Packages/Lua Love/LuaLove.sublime-build",
					"LuaJIT Run File"
				],
				[
					"Packages/Lua Love/LuaLove.sublime-build",
					"Lua Run File"
				],
				[
					"Packages/Lua Love/LuaLove.sublime-build",
					"ldoc: File"
				],
				[
					"Packages/Lua Love/LuaLove.sublime-build",
					"ldoc: Project"
				]
			],
			[
				"Packages/Lua Love/LuaLove.sublime-build",
				""
			]
		]
	],
	"build_varint": "",
	"command_palette":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"res",
				"LSP: Restart Server"
			],
			[
				"insta",
				"Package Control: Install Package"
			],
			[
				"rem",
				"Package Control: Remove Package"
			],
			[
				"remove",
				"Package Control: Remove Package"
			],
			[
				"color",
				"UI: Select Color Scheme"
			],
			[
				"install",
				"Package Control: Install Package"
			],
			[
				"theme",
				"UI: Select Theme"
			],
			[
				"cus",
				"UI: Customize Color Scheme"
			],
			[
				"colo",
				"UI: Select Color Scheme"
			],
			[
				"set synta",
				"Set Syntax: LOVE"
			],
			[
				"op",
				"Terminus: Open Default Shell in Panel"
			],
			[
				"open",
				"Terminus: Open Default Shell in Panel"
			],
			[
				"cu",
				"UI: Customize Color Scheme"
			],
			[
				"ope",
				"Terminus: Open Default Shell in Panel"
			],
			[
				"preferences ter",
				"Preferences: Terminus Settings"
			],
			[
				"set syntax",
				"Set Syntax: LOVE"
			],
			[
				"set syn",
				"Set Syntax: LOVE"
			],
			[
				"remo",
				"Package Control: Remove Package"
			],
			[
				"remov",
				"Package Control: Remove Package"
			],
			[
				"mater",
				"Activate Materialize Theme"
			],
			[
				"them",
				"UI: Select Theme"
			],
			[
				"custom",
				"UI: Customize Color Scheme"
			],
			[
				"instal",
				"Package Control: Install Package"
			],
			[
				"ins",
				"Package Control: Install Package"
			],
			[
				"install ",
				"Package Control: Install Package"
			],
			[
				"Tre",
				"TreeSitter: Reload Plugin"
			],
			[
				"remoe",
				"Package Control: Remove Package"
			],
			[
				"reomve",
				"Package Control: Remove Channel"
			],
			[
				"lsp:re",
				"LSP: Restart Server"
			],
			[
				"lsp: en",
				"LSP: Enable Language Server Globally"
			],
			[
				"thee",
				"UI: Select Theme"
			],
			[
				"in",
				"Package Control: Install Package"
			],
			[
				"inst",
				"Package Control: Install Package"
			],
			[
				"the",
				"UI: Select Theme"
			],
			[
				"mini",
				"View: Toggle Minimap"
			],
			[
				"set syntax L",
				"Set Syntax: LOVE"
			],
			[
				"package",
				"Install Package Control"
			]
		],
		"width": 0.0
	},
	"console":
	{
		"height": 0.0,
		"history":
		[
		]
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": false,
		"show_open_files": false,
		"show_tabs": false,
		"side_bar_visible": false,
		"status_bar_visible": false
	},
	"expanded_folders":
	[
		"/C/Users/botw5/THURS",
		"/C/Users/botw5/THURS/lib"
	],
	"file_history":
	[
		"/C/Users/botw5/THURS/lib/levelEditor.lua",
		"/C/Users/botw5/THURS/build.lua",
		"/C/Users/botw5/THURS/lib/build.lua",
		"/C/Users/botw5/THURS/lib/level_editor.lua",
		"/C/Users/botw5/AppData/Roaming/Sublime Text/Packages/Theme - Monokai Pro/Theme - Monokai Pro.sublime-settings",
		"/C/Users/botw5/AppData/Roaming/Sublime Text/Packages/User/Theme - Monokai Pro.sublime-settings",
		"/C/Users/botw5/Downloads/wolftex/pics/redbrick.png"
	],
	"find":
	{
		"height": 39.2
	},
	"find_in_files":
	{
		"height": 0.0,
		"where_history":
		[
		]
	},
	"find_state":
	{
		"case_sensitive": false,
		"find_history":
		[
			"love.draw",
			"enemy.speed ",
			"if not isColliding",
			"love.draw"
		],
		"highlight": true,
		"in_selection": false,
		"preserve_case": false,
		"regex": false,
		"replace_history":
		[
		],
		"reverse": false,
		"scrollbar_highlights": true,
		"show_context": true,
		"use_buffer2": true,
		"use_gitignore": true,
		"whole_word": false,
		"wrap": true
	},
	"groups":
	[
		{
			"sheets":
			[
				{
					"buffer": 0,
					"file": "main.lua",
					"selected": true,
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 11795,
						"regions":
						{
						},
						"selection":
						[
							[
								793,
								793
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "<",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								}
							],
							"bracket_highlighter.busy": false,
							"bracket_highlighter.locations":
							{
								"close":
								{
								},
								"icon":
								{
								},
								"open":
								{
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.regions":
							[
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content"
							],
							"color_helper.refresh": true,
							"color_helper.scan":
							{
								"allow_scanning": false,
								"color_class":
								[
									{
										"class": "css-level-4",
										"scopes": ""
									}
								],
								"color_trigger": "(?xi)\n(?:\n    \\b(?<![-#&$])(?:\n        color\\((?!\\s*-)|(?:hsla?|(?:ok)?(?:lch|lab)|hwb|rgba?)\\(\n) |\n\\b(?<![-#&$])[\\w]{3,}(?![(-])\\b|(?<![&])\\#)\n",
								"current_ext": ".lua",
								"current_syntax": "Lua Love/LuaLove",
								"enabled": true,
								"last_updated": 1740238739.55,
								"scanning": "-comment"
							},
							"lsp_active": true,
							"lsp_uri": "file:///C:/Users/botw5/THURS/main.lua",
							"show_definitions": false,
							"syntax": "Packages/Lua Love/LuaLove.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 134.4,
						"zoom_level": 1.0
					},
					"stack_index": 0,
					"stack_multiselect": false,
					"type": "text"
				}
			]
		}
	],
	"incremental_find":
	{
		"height": 24.0
	},
	"input":
	{
		"height": 48.0
	},
	"layout":
	{
		"cells":
		[
			[
				0,
				0,
				1,
				1
			]
		],
		"cols":
		[
			0.0,
			1.0
		],
		"rows":
		[
			0.0,
			1.0
		]
	},
	"menu_visible": true,
	"output.LSP Log Panel":
	{
		"height": 0.0
	},
	"output.diagnostics":
	{
		"height": 0.0
	},
	"output.exec":
	{
		"height": 126.400001526
	},
	"output.find_results":
	{
		"height": 0.0
	},
	"output.git":
	{
		"height": 108.0
	},
	"output.mdpopups":
	{
		"height": 0.0
	},
	"pinned_build_system": "Packages/Lua Love/LuaLove.sublime-build",
	"project": "FPS.sublime-project",
	"replace":
	{
		"height": 44.8
	},
	"save_all_on_build": true,
	"select_file":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"select_symbol":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"selected_group": 0,
	"settings":
	{
		"lsp_show_inlay_hints": false
	},
	"show_minimap": false,
	"show_open_files": false,
	"show_tabs": true,
	"side_bar_visible": false,
	"side_bar_width": 150.0,
	"status_bar_visible": true,
	"template_settings":
	{
	}
}
